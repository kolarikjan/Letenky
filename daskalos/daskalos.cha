<?xml version="1.0"?><st-source><time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on May 6, 2007 at 9:19:27 pm</time-stamp><methods><class-id>UI.Dialog class</class-id> <category>private</category><body package="Interface-Dialogs" selector="usesNativeDialogs">usesNativeDialogs	"Answer whether the system should attempt to use native OS dialogs whenever it is possible. Currently this only affects the file dialogs."	^UseNativeDialogs ~~ false "don't break on uninitialized variable"</body></methods><methods><class-id>UI.Dialog class</class-id> <category>enhanced - Win32</category><body package="Aragon.Win32" selector="useWin32">useWin32	^(Aragon includesKey: #Win32)		and: [OSHandle currentOS == #win32 		and: [InputState default shiftDown not]]</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-browser</category><body package="Tools-Settings-VW" selector="browser10DefaultBrowserType">browser10DefaultBrowserType	&lt;setting: #(tools browser defaultBrowserType)&gt;	| typeDescription |	typeDescription := EnumerationSetting		keys: #(Parcel Package Category)		choices: #(Parcel Package Category)		labels: (Array			with: #Parcel &lt;&lt; #labels &gt;&gt; 'Parcel'			with: #Package &lt;&lt; #labels &gt;&gt; 'Package'   with: #Category &lt;&lt; #labels &gt;&gt; 'Category'  ).	^(typeDescription on: Refactory.Browser.BrowserNavigator aspect: #navigatorType)		label: #DefaultBrowserType &lt;&lt; #labels &gt;&gt; 'Default browser type';		helpText: #DefaultBrowserTypeHelpText &lt;&lt; #dialogs &gt;&gt; 'This setting determines what type of browser is opened when spawning a new browser. After the browser is opened, you can change its type at any time using the Browser menu.'</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\vw7.4.1nc\image\undo.im' 'May 6, 2007' '9:19:44 pm')""An image file c:\vw7.4.1nc\image\undo.im was created at 9:19:44 pm on May 6, 2007."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\vw7.4.1nc\image\new741.im' 'May 6, 2007' '9:20:20 pm')""An image file c:\vw7.4.1nc\image\new741.im was created at 9:20:20 pm on May 6, 2007."</do-it><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="//">// anObject(anObject isKindOf: Array) ifTrue: []</body></methods><do-it>[3] isKindOf: BlockClosure</do-it><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="&gt;&gt;">&gt;&gt; anObject 	(anObject isKindOf: Array) ifTrue: [^self projectAll: anObject].	(anObject isKindOf: BlockClosure) ifTrue: [^self select: anObject].	^self error: 'Wrong syntax in "&gt;&gt;" parameter.'</body></methods><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="//">// anObject 	(anObject isKindOf: BlockClosure) ifTrue: [^self select: anObject].	^self error: 'Wrong syntax in "//" parameter.'</body></methods><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="&gt;&gt;">&gt;&gt; anObject 	(anObject isKindOf: Array) ifTrue: [^self projectAll: anObject].	(anObject isKindOf: BlockClosure) ifTrue: [^self collect: anObject].	^self error: 'Wrong syntax in "&gt;&gt;" parameter.'</body></methods><do-it>#(3 4 5) &gt;&gt; #(sin cos)</do-it><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="&gt;&gt;">&gt;&gt; anObject 	(anObject isKindOf: Array) ifTrue: [^self projectAll: anObject].	(anObject isKindOf: BlockClosure) ifTrue: [^self collect: anObject].	^self error: anObject printString , 'must be either a block or an array.'</body></methods><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="&gt;&gt;">&gt;&gt; anObject 	(anObject isKindOf: Array) ifTrue: [^self projectAll: anObject].	(anObject isKindOf: BlockClosure) ifTrue: [^self collect: anObject].	^self error: 'The parameter ' , anObject printString 				, ' must be either a block or an array.'</body></methods><do-it>#(3 4 5) &gt;&gt; [:x | x * x]</do-it><methods><class-id>Core.Collection</class-id> <category>Daskalos support</category><body package="Daskalos" selector="//">// anObject 	(anObject isKindOf: BlockClosure) ifTrue: [^self select: anObject].	^self error: 'The parameter ' , anObject printString , ' must be a block.'</body></methods><do-it>#(3 4 5) // [:x | x&gt; 1] </do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\vw7.4.1nc\image\new741.im' 'March 9, 2009' '12:29:15 pm')""An image file c:\vw7.4.1nc\image\new741.im was created at 12:29:15 pm on March 9, 2009."</do-it><methods><class-id>DaskalosApp</class-id> <category>initialize-release</category><body package="Daskalos" selector="initializeAbout">initializeAbout	self aboutField 		value: 'DASKALOS 1.03b - OBJECT MODELING TUTOR(C) 2006 .. 2009 Vojtech MerunkaEach saved project consists of four files:filename.xml	main file having project data - this is to be saved and loaded,filename.st   	source code of classes in the project,filename.html	paper documentation of the project andfilename.gif   	diagram of classes and collections.All user classes are stored in "Daskalos User Classes" category and may be included into any standard smalltalk program.Version 1.03b# Collection operators // and &gt;&gt; has been added.Version 1.02b# Composition links to classes and collections improved.Version 1.01b# File save dialog fixed.# In HTML documentation displayed by the MS Internet Explorer, apostrophe character fixed.# Diagram stability improved, no crashes after class or collection rename and remove.'</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('c:\vw7.4.1nc\image\new741.im' 'March 9, 2009' '12:32:37 pm')""An image file c:\vw7.4.1nc\image\new741.im was created at 12:32:37 pm on March 9, 2009."</do-it><methods><class-id>DaskalosApp</class-id> <category>runtime</category><body package="Daskalos" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow 	ObjectMemory quit</body></methods><methods><class-id>DaskalosApp</class-id> <category>runtime</category><body package="Daskalos" selector="projectSave">projectSave	projectName value asString = 'save image' ifFalse: [^self projectSaveOld].	projectName value: ''.	ObjectMemory saveAs: 'daskalos' thenQuit: true</body></methods><methods><class-id>DaskalosApp</class-id> <category>runtime</category><body package="Daskalos" selector="projectSaveOld">projectSaveOld	| project fileName stream sourceFileName htmlFileName gifFileName |	Object errorSignal handle: [:ex | project := nil]		do: [project := self projectData].	project isNil ifTrue: [^Dialog warn: 'Incomplete data.'].	(fileName := Dialog requestNewFileName: 'Name a file' default: 'aDaskalosProject.xml') 		isEmpty ifTrue: [^nil].	(fileName isLike: '*.xml') ifFalse: [fileName := fileName , '.xml'].	sourceFileName := (fileName copyFrom: 1 to: fileName size - 4) , '.st'.	gifFileName := (fileName copyFrom: 1 to: fileName size - 4) , '.gif'.	htmlFileName := (fileName copyFrom: 1 to: fileName size - 4) , '.html'.	Cursor write showWhile: 			[			[stream := SixxWriteStream newFileNamed: fileName.			stream nextPut: project] 					ensure: [stream close].			self saveClassesToFile: sourceFileName.			self saveGIFToFile: gifFileName.			self saveHTMLToFile: htmlFileName]</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('daskalos.im' 'March 9, 2009' '12:34:03 pm')""An image file daskalos.im was created at 12:34:03 pm on March 9, 2009."</do-it><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Auto class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Auto</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     type := nil.</body></methods><do-it>Auto removeFromSystem</do-it><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno pohlavi </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#pohlavi -&gt; Core.String); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pohlavi:">pohlavi: anObject"generated by Daskalos"     pohlavi := (self checkValue: anObject forVariable: #pohlavi)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pohlavi">pohlavi"generated by Daskalos"     ^pohlavi</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     pohlavi := nil.</body></methods><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno pohlavi datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pohlavi -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     pohlavi := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Pes</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'haf'</body></methods><methods><class-id>Pes</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vrt">vrt	^'vrti vrti'</body></methods><methods><class-id>Pes</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vrt">vrt	^'vrti vrti'</body></methods><do-it>obecnyPes := Pes new.</do-it><do-it>obecnyPes jmeno: 'Punta Obecny';                 pohlavi: 'M';                 datumNarozeni: '16 Jan 2009'.</do-it><do-it>obecnyPes jmeno: 'Punta Obecny';                 pohlavi: 'M';                 datumNarozeni: '16 Jan 2009' asDate.</do-it><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno pohlavi datumNarozeni barva </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pohlavi -&gt; Core.String); add: (#barva -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="barva:">barva: anObject"generated by Daskalos"     barva := (self checkValue: anObject forVariable: #barva)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="barva">barva"generated by Daskalos"     ^barva</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     pohlavi := nil.     datumNarozeni := nil.     barva := nil.</body></methods><class><name>Jezevcik</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Jezevcik</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delka </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Jezevcik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pohlavi -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#delka -&gt; Core.Number); add: (#barva -&gt; Core.String); yourself)</body></methods><methods><class-id>Jezevcik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka:">delka: anObject"generated by Daskalos"     delka := (self checkValue: anObject forVariable: #delka)</body></methods><methods><class-id>Jezevcik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka">delka"generated by Daskalos"     ^delka</body></methods><methods><class-id>Jezevcik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     delka := nil.</body></methods><methods><class-id>Jezevcik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="noruj">noruj	^'nor nor'</body></methods><methods><class-id>Jezevcik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="noruj">noruj	^'hura do nory'</body></methods><do-it>astaJezevcik := Jezevcik new.astaJezevcik jmeno: 'Asta'; pohlavi: 'F'; datumNarozeni: '5 May 2005' asDate.</do-it><do-it>astaJezevcik barva: 'hneda'; delka: '70'.</do-it><do-it>astaJezevcik barva: 'hneda'; delka: 70.</do-it><methods><class-id>Jezevcik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'haaaaaf haf'</body></methods><class><name>Bernardyn</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Bernardyn</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objemSoudku </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bernardyn class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pohlavi -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#objemSoudku -&gt; Core.Number); add: (#barva -&gt; Core.String); yourself)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="objemSoudku:">objemSoudku: anObject"generated by Daskalos"     objemSoudku := (self checkValue: anObject forVariable: #objemSoudku)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="objemSoudku">objemSoudku"generated by Daskalos"     ^objemSoudku</body></methods><methods><class-id>Bernardyn</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     objemSoudku := nil.</body></methods><class><name>Bernardyn</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objemSoudku naplnSoudku </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bernardyn class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#barva -&gt; Core.String); add: (#pohlavi -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#objemSoudku -&gt; Core.Number); add: (#naplnSoudku -&gt; Core.String); yourself)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naplnSoudku:">naplnSoudku: anObject"generated by Daskalos"     naplnSoudku := (self checkValue: anObject forVariable: #naplnSoudku)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naplnSoudku">naplnSoudku"generated by Daskalos"     ^naplnSoudku</body></methods><methods><class-id>Bernardyn</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     objemSoudku := nil.     naplnSoudku := nil.</body></methods><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="dejNapit">dejNapit	^'glo glo glo'</body></methods><do-it>maxipesFik := Bernardyn new.maxipesFik jmeno: 'Fik'; pohlavi: 'M'; datumNarozeni: '13 July 2003' asDate.maxipesFik barva: 'skvrny'.</do-it><do-it>maxipesFik objemSoudku: 10; naplnSoudku: 'Tuzemak'.</do-it><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'HAF HAF'</body></methods><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.</body></methods><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa mojiPsi </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#mojiPsi -&gt; Core.Set); add: (#adresa -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mojiPsi">mojiPsi"generated by Daskalos"     ^mojiPsi</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     mojiPsi := Set new.</body></methods><do-it>pepa := Clovek new.pepa jmeno: 'Josef'; prijmeni: 'Vomacka'; adresa: 'Praha'.</do-it><do-it>pepa mojiPsi add: maxipesFik.</do-it><do-it>pepa mojiPsi add: astaJezevcik.</do-it><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^super stekni</body></methods><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^super super stekni</body></methods><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'HAF HAF'</body></methods><do-it>pepa mojiPsi</do-it><do-it>pepa mojiPsi</do-it><methods><class-id>Clovek</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pocetPsu">pocetPsu	^mojiPsi size</body></methods><do-it>pepa mojiPsi add: obecnyPes.</do-it><do-it>pepa mojiPsi remove: obecnyPes.</do-it><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno pohlavi datumNarozeni barva cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pohlavi -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#cena -&gt; Core.Number); add: (#barva -&gt; Core.String); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     pohlavi := nil.     datumNarozeni := nil.     barva := nil.     cena := nil.</body></methods><do-it>obecnyPes cena: 100.maxipesFik cena: 25000.astaJezevcik cena:5000.</do-it><do-it>pepa mojiPsi collect: [:x | x cena ]</do-it><do-it>(pepa mojiPsi collect: [:x | x cena ]) sum</do-it><methods><class-id>Clovek</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPsu">cenaPsu	^(mojiPsi collect: [:x | x cena]) sum</body></methods><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     datumNarozeni := nil.</body></methods><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno datumNarozeni barva </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#barva -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="barva:">barva: anObject"generated by Daskalos"     barva := (self checkValue: anObject forVariable: #barva)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="barva">barva"generated by Daskalos"     ^barva</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     datumNarozeni := nil.     barva := nil.</body></methods><methods><class-id>Pes</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'haf haf'</body></methods><do-it>vorech := Pes new.</do-it><do-it>vorech jmeno: 'Punta'.vorech barva: 'bila'.vorech datumNarozeni: 'Jan 16 2009'.</do-it><do-it>vorech jmeno: 'Punta'.vorech barva: 'bila'.vorech datumNarozeni: 'Jan 16 2009' asDate.</do-it><do-it>vorech jmeno: 'Punta'.vorech barva: 'bila'.vorech datumNarozeni: '12 16 2009' asDate.</do-it><do-it>vorech jmeno: 'Punta'.vorech barva: 'bila'.vorech datumNarozeni: '16 july 2009' asDate.</do-it><do-it>vorech jmeno: 'Punta';          barva: 'bila';          datumNarozeni: '16 july 2009' asDate.</do-it><class><name>SlepeckyPes</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>SlepeckyPes removeFromSystem</do-it><class><name>Jezevcik</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Jezevcik</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delka </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Jezevcik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#barva -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#delka -&gt; Core.Number); yourself)</body></methods><methods><class-id>Jezevcik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka:">delka: anObject"generated by Daskalos"     delka := (self checkValue: anObject forVariable: #delka)</body></methods><methods><class-id>Jezevcik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka">delka"generated by Daskalos"     ^delka</body></methods><methods><class-id>Jezevcik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     delka := nil.</body></methods><methods><class-id>Jezevcik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="noruj">noruj	^'hop do nory'</body></methods><do-it>asta := Jezevcik new.asta jmeno: 'Asta';       barva: 'zrzava';       delka: 70;       datumNarozeni: '3 may 2006' asDate.</do-it><methods><class-id>Jezevcik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'haaaaaaf haaaaaaaf'</body></methods><class><name>Bernardyn</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Bernardyn</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objemSoudku </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bernardyn class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#barva -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#objemSoudku -&gt; Core.Number); yourself)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="objemSoudku:">objemSoudku: anObject"generated by Daskalos"     objemSoudku := (self checkValue: anObject forVariable: #objemSoudku)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="objemSoudku">objemSoudku"generated by Daskalos"     ^objemSoudku</body></methods><methods><class-id>Bernardyn</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     objemSoudku := nil.</body></methods><class><name>Bernardyn</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objemSoudku naplnSoudku </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bernardyn class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#naplnSoudku -&gt; Core.String); add: (#barva -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#objemSoudku -&gt; Core.Number); yourself)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naplnSoudku:">naplnSoudku: anObject"generated by Daskalos"     naplnSoudku := (self checkValue: anObject forVariable: #naplnSoudku)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naplnSoudku">naplnSoudku"generated by Daskalos"     ^naplnSoudku</body></methods><methods><class-id>Bernardyn</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     objemSoudku := nil.     naplnSoudku := nil.</body></methods><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="dejNapit">dejNapit	^'glo glo glo glo'</body></methods><do-it>fik := Bernardyn new.fik jmeno: 'Fik'; barva: 'fleky'; objemSoudku: 10; naplnSoudku: 'Tuzemak'; datumNarozeni: '10 feb 2005'.</do-it><do-it>fik := Bernardyn new.fik jmeno: 'Fik'; barva: 'fleky'; objemSoudku: 10; naplnSoudku: 'Tuzemak'; datumNarozeni: '10 feb 2005' asDate.</do-it><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'HAF HAF'</body></methods><do-it>fik stekni</do-it><do-it>psi := Set with: vorech with: asta with: fik.</do-it><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.</body></methods><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa mojiPsi </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#mojiPsi -&gt; Core.Set); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mojiPsi">mojiPsi"generated by Daskalos"     ^mojiPsi</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     mojiPsi := Set new.</body></methods><do-it>pepa := Clovek new.pepa jmeno: 'Josef'; prijmeni: 'Vomacka'; adresa: 'Kladno'.</do-it><do-it>pepa mojiPsi add: fik.</do-it><do-it>pepa mojiPsi add: asta.</do-it><methods><class-id>Clovek</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pocetPsu">pocetPsu	^mojiPsi size</body></methods><do-it>pepa mojiPsi remove: asta</do-it><do-it>pepa mojiPsi add: asta.</do-it><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno datumNarozeni barva cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#cena -&gt; Core.Number); add: (#barva -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     datumNarozeni := nil.     barva := nil.     cena := nil.</body></methods><do-it>asta cena: 5000.fik cena: 20000.vorech cena: 500.</do-it><do-it>pepa mojiPsi collect: [:x | x cena ]</do-it><do-it> (pepa mojiPsi collect: [:x | x cena ]) inject: 0 into: [:x :y | x + y]</do-it><do-it> (pepa mojiPsi collect: [:x | x cena ]) sum</do-it><methods><class-id>Clovek</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPsu">cenaPsu	^(mojiPsi collect: [:x | x cena]) sum</body></methods><class><name>Clovek</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa mojiPsi </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Clovek class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#mojiPsi -&gt; Core.Set); yourself)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mojiPsi">mojiPsi"generated by Daskalos"     ^mojiPsi</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Clovek</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Clovek</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     mojiPsi := Set new.</body></methods><methods><class-id>Clovek</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPsu">cenaPsu	^(mojiPsi collect: [:x | x cena]) sum</body></methods><methods><class-id>Clovek</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pocetPsu">pocetPsu	^mojiPsi size</body></methods><class><name>Pes</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno datumNarozeni barva cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Pes class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#cena -&gt; Core.Number); add: (#barva -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="barva">barva"generated by Daskalos"     ^barva</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="barva:">barva: anObject"generated by Daskalos"     barva := (self checkValue: anObject forVariable: #barva)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Pes</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Pes</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     datumNarozeni := nil.     barva := nil.     cena := nil.</body></methods><methods><class-id>Pes</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'haf haf'</body></methods><class><name>Jezevcik</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delka </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Jezevcik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#barva -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#delka -&gt; Core.Number); yourself)</body></methods><methods><class-id>Jezevcik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka">delka"generated by Daskalos"     ^delka</body></methods><methods><class-id>Jezevcik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka:">delka: anObject"generated by Daskalos"     delka := (self checkValue: anObject forVariable: #delka)</body></methods><methods><class-id>Jezevcik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     delka := nil.</body></methods><methods><class-id>Jezevcik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="noruj">noruj	^'hop do nory'</body></methods><methods><class-id>Jezevcik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'haaaaaaf haaaaaaaf'</body></methods><class><name>Bernardyn</name><environment>Smalltalk</environment><super>Pes</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objemSoudku naplnSoudku </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Bernardyn class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#naplnSoudku -&gt; Core.String); add: (#barva -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#objemSoudku -&gt; Core.Number); yourself)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naplnSoudku">naplnSoudku"generated by Daskalos"     ^naplnSoudku</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naplnSoudku:">naplnSoudku: anObject"generated by Daskalos"     naplnSoudku := (self checkValue: anObject forVariable: #naplnSoudku)</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="objemSoudku">objemSoudku"generated by Daskalos"     ^objemSoudku</body></methods><methods><class-id>Bernardyn</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="objemSoudku:">objemSoudku: anObject"generated by Daskalos"     objemSoudku := (self checkValue: anObject forVariable: #objemSoudku)</body></methods><methods><class-id>Bernardyn</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     objemSoudku := nil.     naplnSoudku := nil.</body></methods><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="dejNapit">dejNapit	^'glo glo glo glo'</body></methods><methods><class-id>Bernardyn</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stekni">stekni	^'HAF HAF'</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev rok </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#rok -&gt; Core.Number); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rok:">rok: anObject"generated by Daskalos"     rok := (self checkValue: anObject forVariable: #rok)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rok">rok"generated by Daskalos"     ^rok</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     rok := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev rok cenaÂ¨ </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#rok -&gt; Core.Number); add: (#'cenaÂ¨' -&gt; Core.Number); add: (#nazev -&gt; Core.String); yourself)</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev rok </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#rok -&gt; Core.Number); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     rok := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev rok cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#rok -&gt; Core.Number); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     rok := nil.     cena := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev rok cena inventarniCislo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#rok -&gt; Core.Number); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#inventarniCislo -&gt; Core.Number); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="inventarniCislo:">inventarniCislo: anObject"generated by Daskalos"     inventarniCislo := (self checkValue: anObject forVariable: #inventarniCislo)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="inventarniCislo">inventarniCislo"generated by Daskalos"     ^inventarniCislo</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     rok := nil.     cena := nil.     inventarniCislo := nil.</body></methods><class><name>DVD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>DVD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>DVD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#reziser -&gt; Core.String); add: (#rok -&gt; Core.Number); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#inventarniCislo -&gt; Core.Number); yourself)</body></methods><methods><class-id>DVD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>DVD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>DVD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#interpret -&gt; Core.String); add: (#rok -&gt; Core.Number); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#inventarniCislo -&gt; Core.Number); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret pocetSkladeb </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pocetSkladeb -&gt; Core.Number); add: (#interpret -&gt; Core.String); add: (#inventarniCislo -&gt; Core.Number); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#rok -&gt; Core.Number); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetSkladeb:">pocetSkladeb: anObject"generated by Daskalos"     pocetSkladeb := (self checkValue: anObject forVariable: #pocetSkladeb)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetSkladeb">pocetSkladeb"generated by Daskalos"     ^pocetSkladeb</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.     pocetSkladeb := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datumVypujcky -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumVypujcky:">datumVypujcky: anObject"generated by Daskalos"     datumVypujcky := (self checkValue: anObject forVariable: #datumVypujcky)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumVypujcky">datumVypujcky"generated by Daskalos"     ^datumVypujcky</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky datumNavratu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datumVypujcky -&gt; Core.Date); add: (#datumNavratu -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNavratu:">datumNavratu: anObject"generated by Daskalos"     datumNavratu := (self checkValue: anObject forVariable: #datumNavratu)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNavratu">datumNavratu"generated by Daskalos"     ^datumNavratu</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.     datumNavratu := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky datumNavratu delka </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#delka -&gt; Core.Number); add: (#datumVypujcky -&gt; Core.Date); add: (#datumNavratu -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka:">delka: anObject"generated by Daskalos"     delka := (self checkValue: anObject forVariable: #delka)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka">delka"generated by Daskalos"     ^delka</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.     datumNavratu := nil.     delka := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky datumNavratu delka zakaznik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#delka -&gt; Core.Number); add: (#zakaznik -&gt; Core.Object); add: (#datumVypujcky -&gt; Core.Date); add: (#datumNavratu -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.     datumNavratu := nil.     delka := nil.     zakaznik := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky datumNavratu delka zakaznik polozky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#delka -&gt; Core.Number); add: (#zakaznik -&gt; Core.Object); add: (#polozky -&gt; Core.Set); add: (#datumVypujcky -&gt; Core.Date); add: (#datumNavratu -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.     datumNavratu := nil.     delka := nil.     zakaznik := nil.     polozky := Set new.</body></methods><do-it>z1 := Zakaznik new.z1 jmeno: 'Jan'; prijmeni: 'Novak'; adresa: 'Praha 6'; datumNarozeni: '6 dec 1981' asDate.z2 := Zakaznik new.z2 jmeno: 'Frantisek'; prijmeni: 'Dobrota'; adresa: 'Blizka Vesnice'; datumNarozeni: '15 may 1975' asDate.z3 := Zakaznik new.z3 jmeno: 'Emil'; prijmeni: 'Vosahlo'; adresa: 'Kladno'; datumNarozeni: '26 sep 1995' asDate.Zakaznici := Set with: z1 with: z2 with: z3.</do-it><do-it>z1 := Zakaznik new.z1 jmeno: 'Jan'; prijmeni: 'Novak'; adresa: 'Praha 6'; datumNarozeni: '6 dec 1981' asDate.z2 := Zakaznik new.z2 jmeno: 'Frantisek'; prijmeni: 'Dobrota'; adresa: 'Blizka Vesnice'; datumNarozeni: '15 may 1975' asDate.z3 := Zakaznik new.z3 jmeno: 'Emil'; prijmeni: 'Vosahlo'; adresa: 'Kladno'; datumNarozeni: '26 sep 1995' asDate.Zakaznici := Set with: z1 with: z2 with: z3.d1 := DVD new.d1 nazev: 'Rambo'; rok: 1982 ; reziser: 'Kotcheff'; cena: 25; inventarniCislo: 123.d2 := DVD new.d2 nazev: 'Top Gun'; rok: 1986 ; reziser: 'Tony Scott'; cena: 20 ; inventarniCislo: 124.d3 := DVD new.d3 nazev: 'Prelet nad kukaccim hnizdem'; rok: 1975 ; reziser: 'Milos Forman'; cena: 30; inventarniCislo: 125.c1 := CD new.c1 nazev: 'Black Swans and Wormhole Wizards'; interpret: 'Joe Satriani'; rok: 2010; cena: 30; inventarniCislo: 210.c2 := CD new.c2 nazev: 'Paranoid'; interpret: 'Black Sabbath'; rok: 1971; cena: 25; inventarniCislo: 211.c3 := CD new.c3 nazev: 'Back in Black'; interpret: 'AC/DC'; rok: 1980; cena: 25; inventarniCislo: 212.Inventar := Set new.Inventar add: d1; add: d2; add: d3; add: c1; add: c2; add: c3.</do-it><do-it>z1 := Zakaznik new.z1 jmeno: 'Jan'; prijmeni: 'Novak'; adresa: 'Praha 6'; datumNarozeni: '6 dec 1981' asDate.z2 := Zakaznik new.z2 jmeno: 'Frantisek'; prijmeni: 'Dobrota'; adresa: 'Blizka Vesnice'; datumNarozeni: '15 may 1975' asDate.z3 := Zakaznik new.z3 jmeno: 'Emil'; prijmeni: 'Vosahlo'; adresa: 'Kladno'; datumNarozeni: '26 sep 1995' asDate.Zakaznici := Set with: z1 with: z2 with: z3.d1 := DVD new.d1 nazev: 'Rambo'; rok: 1982 ; reziser: 'Kotcheff'; cena: 25; inventarniCislo: 123.d2 := DVD new.d2 nazev: 'Top Gun'; rok: 1986 ; reziser: 'Tony Scott'; cena: 20 ; inventarniCislo: 124.d3 := DVD new.d3 nazev: 'Prelet nad kukaccim hnizdem'; rok: 1975 ; reziser: 'Milos Forman'; cena: 30; inventarniCislo: 125.c1 := CD new.c1 nazev: 'Black Swans and Wormhole Wizards'; interpret: 'Joe Satriani'; rok: 2010; cena: 30; inventarniCislo: 210.c2 := CD new.c2 nazev: 'Paranoid'; interpret: 'Black Sabbath'; rok: 1971; cena: 25; inventarniCislo: 211.c3 := CD new.c3 nazev: 'Back in Black'; interpret: 'AC/DC'; rok: 1980; cena: 25; inventarniCislo: 212.Inventar := Set new.Inventar add: d1; add: d2; add: d3; add: c1; add: c2; add: c3.v1 := Vypujcka new.v1 datumVypujcky: '28 oct 2010' asDate. v1 datumNavratu: '30 oct 2010' asDate.v1 delka: 3; zakaznik: z1.v1 polozky add: c1; add: d2.v2 := Vypujcka new.v2 datumVypujcky: '1 nov 2010' asDate. v2 delka: 2; zakaznik: z3.v2 polozky add: c3; add: d1.v3 := Vypujcka new.v3 datumVypujcky: '1 nov 2010' asDate. v3 datumNavratu: '3 nov 2010' asDate.v3 delka: 2; zakaznik: z2.v3 polozky add: c2; add: d3.Vypujcky := Set new.Vypujcky add: v1; add: v2; add: v3.</do-it><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	^delka * (polozky collect: [:x | x cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stav">stav	datumNavratu isNil ifTrue: [^'Probihajici'] ifFalse: [^'Ukoncena']</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="penale">penale	| x |	datumNavratu isNil 		ifTrue: 			[x := Date today subtractDate: datumVypujcky.			x &gt; delka ifTrue: [^(x - delka) * 50] ifFalse: [^0]]		ifFalse: 			[x := datumNavratu subtractDate: datumVypujcky.			x &gt; delka ifTrue: [^(x - delka) * 50] ifFalse: [^0]]</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	^delka * (polozky collect: [:x | x cena] asBag) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	^delka * (polozky collect: [:x | x cena]) asBag sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	^delka * (polozky asBag collect: [:x | x cena]) sum</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>DVD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena delka </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#delka -&gt; Core.Number); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka:">delka: anObject"generated by Daskalos"     delka := (self checkValue: anObject forVariable: #delka)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka">delka"generated by Daskalos"     ^delka</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.     delka := nil.</body></methods><class><name>DVD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>DVD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); add: (#delka -&gt; Core.Number); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>DVD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>DVD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>DVD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#delka -&gt; Core.Number); add: (#cena -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret pocetSkladeb </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#pocetSkladeb -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#interpret -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#delka -&gt; Core.Number); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetSkladeb:">pocetSkladeb: anObject"generated by Daskalos"     pocetSkladeb := (self checkValue: anObject forVariable: #pocetSkladeb)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetSkladeb">pocetSkladeb"generated by Daskalos"     ^pocetSkladeb</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.     pocetSkladeb := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#adresa -&gt; Core.String); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#jmeno -&gt; Core.String); add: (#adresa -&gt; Core.String); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni kontakt </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); add: (#kontakt -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#adresa -&gt; Core.String); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kontakt:">kontakt: anObject"generated by Daskalos"     kontakt := (self checkValue: anObject forVariable: #kontakt)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kontakt">kontakt"generated by Daskalos"     ^kontakt</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.     kontakt := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datumVypujcky -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumVypujcky:">datumVypujcky: anObject"generated by Daskalos"     datumVypujcky := (self checkValue: anObject forVariable: #datumVypujcky)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumVypujcky">datumVypujcky"generated by Daskalos"     ^datumVypujcky</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky datumNavratu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datumNavratu -&gt; Core.Date); add: (#datumVypujcky -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNavratu:">datumNavratu: anObject"generated by Daskalos"     datumNavratu := (self checkValue: anObject forVariable: #datumNavratu)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNavratu">datumNavratu"generated by Daskalos"     ^datumNavratu</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.     datumNavratu := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky datumNavratu delka </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datumNavratu -&gt; Core.Date); add: (#delka -&gt; Core.Number); add: (#datumVypujcky -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka:">delka: anObject"generated by Daskalos"     delka := (self checkValue: anObject forVariable: #delka)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="delka">delka"generated by Daskalos"     ^delka</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.     datumNavratu := nil.     delka := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky datumNavratu delka zakaznik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datumNavratu -&gt; Core.Date); add: (#delka -&gt; Core.Number); add: (#zakaznik -&gt; Core.Object); add: (#datumVypujcky -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.     datumNavratu := nil.     delka := nil.     zakaznik := nil.</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datumVypujcky datumNavratu delka zakaznik polozky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datumVypujcky -&gt; Core.Date); add: (#delka -&gt; Core.Number); add: (#polozky -&gt; Core.List); add: (#zakaznik -&gt; Core.Object); add: (#datumNavratu -&gt; Core.Date); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datumVypujcky := nil.     datumNavratu := nil.     delka := nil.     zakaznik := nil.     polozky := List new.</body></methods><do-it>z1 := Zakaznik new.z1 jmeno: 'Pepa'; prijmeni: 'Novak'; adresa: 'Praha'; kontakt: 'pepa.z.depa@email.cz'; datumNarozeni: '25 may 1985' asDate.z2 := Zakaznik new.z2 jmeno: 'Franta'; prijmeni: 'Dobrota'; adresa: 'Blizka Vesnice'; kontakt: 'dobrotaf@topoly.cz'; datumNarozeni: '12 jan 1974' asDate.z3 := Zakaznik new.z3 jmeno: 'Honza'; prijmeni: 'Vomacka'; adresa: 'Praha'; kontakt: 'xvomj101@pef.czu.cz'; datumNarozeni: '5 sep 1990' asDate.Zakaznici := Set with: z1 with: z2 with: z3.</do-it><do-it>z1 := Zakaznik new.z1 jmeno: 'Pepa'; prijmeni: 'Novak'; adresa: 'Praha'; kontakt: 'pepa.z.depa@email.cz'; datumNarozeni: '25 may 1985' asDate.z2 := Zakaznik new.z2 jmeno: 'Franta'; prijmeni: 'Dobrota'; adresa: 'Blizka Vesnice'; kontakt: 'dobrotaf@topoly.cz'; datumNarozeni: '12 jan 1974' asDate.z3 := Zakaznik new.z3 jmeno: 'Honza'; prijmeni: 'Vomacka'; adresa: 'Praha'; kontakt: 'xvomj101@pef.czu.cz'; datumNarozeni: '5 sep 1990' asDate.Zakaznici := Set with: z1 with: z2 with: z3.c1 := CD new.c1 nazev: 'Zeme plna trpasliku'; zanr: 'rock'; cena: 25; delka: 70; interpret: 'Kabat'.c2 := CD new.c2 nazev: 'Karton veverek'; zanr: 'rock'; cena: 20; delka: 60; interpret: 'Wohnout'.c3 := CD new.c3 nazev: 'Druide'; zanr: 'rock'; cena: 30; delka: 70; interpret: 'Krucipusk'.d1 := DVD new.d1 nazev: 'Star Trek'; zanr: 'sci-fi'; cena: 30; delka: 120; reziser: 'J.J. Abrams'.d2 := DVD new.d2 nazev: 'Po precteni spalte'; zanr: 'akcni'; cena: 30; delka: 100; reziser: 'Bratri Cohenove'.d3 := DVD new.d3 nazev: 'Avatar'; zanr: 'sci-fi'; cena: 25; delka: 140; reziser: 'James Cameron'.Inventar := Set new.Inventar add: c1; add: c2; add: c3; add: d1; add: d2; add: d3.</do-it><do-it>z1 := Zakaznik new.z1 jmeno: 'Pepa'; prijmeni: 'Novak'; adresa: 'Praha'; kontakt: 'pepa.z.depa@email.cz'; datumNarozeni: '25 may 1985' asDate.z2 := Zakaznik new.z2 jmeno: 'Franta'; prijmeni: 'Dobrota'; adresa: 'Blizka Vesnice'; kontakt: 'dobrotaf@topoly.cz'; datumNarozeni: '12 jan 1974' asDate.z3 := Zakaznik new.z3 jmeno: 'Honza'; prijmeni: 'Vomacka'; adresa: 'Praha'; kontakt: 'xvomj101@pef.czu.cz'; datumNarozeni: '5 sep 1990' asDate.Zakaznici := Set with: z1 with: z2 with: z3.c1 := CD new.c1 nazev: 'Zeme plna trpasliku'; zanr: 'rock'; cena: 25; delka: 70; interpret: 'Kabat'.c2 := CD new.c2 nazev: 'Karton veverek'; zanr: 'rock'; cena: 20; delka: 60; interpret: 'Wohnout'.c3 := CD new.c3 nazev: 'Druide'; zanr: 'rock'; cena: 30; delka: 70; interpret: 'Krucipusk'.d1 := DVD new.d1 nazev: 'Star Trek'; zanr: 'sci-fi'; cena: 30; delka: 120; reziser: 'J.J. Abrams'.d2 := DVD new.d2 nazev: 'Po precteni spalte'; zanr: 'akcni'; cena: 30; delka: 100; reziser: 'Bratri Cohenove'.d3 := DVD new.d3 nazev: 'Avatar'; zanr: 'sci-fi'; cena: 25; delka: 140; reziser: 'James Cameron'.Inventar := Set new.Inventar add: c1; add: c2; add: c3; add: d1; add: d2; add: d3.v1 := Vypujcka new.v1 datumVypujcky: '28 oct 2010' asDate.v1 datumNavratu: '30 oct 2010' asDate.v1 delka: 2; zakaznik: z1.v1 polozky add: c1; add: d3.v2 := Vypujcka new.v2 datumVypujcky: '29 oct 2010' asDate.v2 delka: 3; zakaznik: z2.v2 polozky add: c2; add: d2.v3 := Vypujcka new.v3 datumVypujcky: '3 nov 2010' asDate.v3 delka: 2; zakaznik: z3.v3 polozky add: c3; add: d1.Vypujcky := Set with: v1 with: v2 with: v3.</do-it><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	^polozky collect: [:x | x cena]</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	^(polozky collect: [:x | x cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	^delka * (polozky collect: [:x | x cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stav">stav	datumNavratu isNil ifTrue: [^'nevraceno'] ifFalse: [^'vraceno']</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="penale">penale	| x |	datumNavratu isNil 		ifTrue: 			[x := Date today subtractDate: datumVypujcky.			x &gt; delka ifTrue: [^(x - delka) * 50] ifFalse: [^0]]		ifFalse: 			[x := datumNavratu subtractDate: datumVypujcky.			x &gt; delka ifTrue: [^(x - delka) * 50] ifFalse: [^0]]</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="penale">penale	| x |	datumNavratu isNil 		ifTrue: [x := Date today subtractDate: datumVypujcky]		ifFalse: [x := datumNavratu subtractDate: datumVypujcky].	x &gt; delka ifTrue: [^(x - delka) * 50] ifFalse: [^0]</body></methods><do-it>VisualLauncher open</do-it><do-it>VisualLauncher open</do-it><do-it>VisualLauncher open</do-it><do-it>VisualLauncher open</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(4 9 2 1 5 4 9 8 2 1 21 5 4 23 54 74).velikost := vstup size.vysledek := Array new: velikost.i := 1.velikost timesRepeat:  [pom := vstup at: i.   pom := pom * 10.   vysledek at: i put: pom.   i := i + 1.  ].^vysledek</do-it><do-it>vstup := #(4 9 2 1 5 4 9 8 2 1 21 5 4 23 54 74).</do-it><do-it>vstup collect: [:x | x * 10]</do-it><do-it>vstup collect: [:x | x * 10]</do-it><do-it>| vstup velikost pom i vysledek |vstup := 'Tohle je text.'.velikost := vstup size.vysledek := OrderedCollection new.i := 1.velikost timesRepeat:  [pom := vstup at: i.   (pom isVowel) ifTrue: [vysledek add: pom].   i := i + 1.  ].^vysledek asArray</do-it><do-it>vstup := 'Tohle je text.'.</do-it><do-it>vstup select: [:x | x isVowel]</do-it><do-it>(vstup select: [:x | x isVowel]) asArray</do-it><do-it>| vstup velikost pom i vysledek |vstup := 'Tohle je text.'.velikost := vstup size.vysledek := OrderedCollection new.i := 1.velikost timesRepeat:  [pom := vstup at: i.   (pom isVowel) ifTrue: [vysledek add: pom].   i := i + 1.  ].^vysledek asArray</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(1 2 3 4 5 6 7 8 9).velikost := vstup size.vysledek := 0.i := 1.velikost timesRepeat:  [pom := vstup at: i.   vysledek := vysledek + pom.   i := i + 1.  ].^vysledek</do-it><do-it>vstup := #(1 2 3 4 5 6 7 8 9).</do-it><do-it>vstup sum</do-it><do-it>vstup inject: 0 into: [:x :y | x + y]</do-it><do-it>VisualLauncher open</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(4 9 12 1 5 8 7 31 5 2).velikost := vstup size.vysledek := Array new: velikost.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    pom := pom * 10.    vysledek at: i put: pom.    i := i + 1.  ].^vysledek</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(4 9 12 1 5 8 7 31 5 2).velikost := vstup size.vysledek := Array new: velikost.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    pom := pom * 10.    vysledek at: i put: pom.    i := i + 1.  ].^vysledek</do-it><do-it>vstup := #(4 9 12 1 5 8 7 31 5 2).</do-it><do-it>vstup collect: [:x | x * 10]</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(4 9 12 1 5 8 7 31 5 2).velikost := vstup size.vysledek := Array new: velikost.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    pom := pom ** 2.    vysledek at: i put: pom.    i := i + 1.  ].^vysledek </do-it><do-it>vstup collect: [:x | x ** 2] </do-it><do-it>| vstup velikost pom i vysledek |vstup := 'Tohle je muj textik'.velikost := vstup size.vysledek := OrderedCollection new.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    (pom isVowel) ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>vstup := 'Tohle je muj textik'.</do-it><do-it>vstup select: [:x | x isVowel ]</do-it><do-it>vstup := 'Tohle je muj textik'.velikost := vstup size.vysledek := OrderedCollection new.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    (pom isVowel) ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>'Tohle je muj textik'</do-it><do-it>vstup select: [:x | x isVowel ]</do-it><do-it>vstup := 'Tohle je muj textik'.velikost := vstup size.vysledek := OrderedCollection new.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    (pom isVowel) ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek </do-it><do-it>vstup := #(4 9 12 1 5 8 7 31 5 2).velikost := vstup size.vysledek := 0.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    vysledek := vysledek + pom.    i := i + 1.  ].^vysledek</do-it><do-it>vstup sum</do-it><do-it>vstup inject: 0 into: [:x :y | x+y]</do-it><do-it>vstup sum</do-it><do-it>vstup := #(4 9 12 1 5 8 7 31 5 2).velikost := vstup size.vysledek := 0.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    vysledek := vysledek + pom.    i := i + 1.  ].^vysledek</do-it><do-it>VisualLauncher open</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(1 2 3 54 9 8 7  1 2).velikost := vstup size.vysledek := Array new: velikost.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    pom := pom * 10.    vysledek at: i put: pom.    i := i + 1.  ].^vysledek</do-it><do-it>vstup := #(1 2 3 54 9 8 7  1 2).</do-it><do-it>vstup collect: [:x | x * 10].</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(1 2 3 54 9 8 7  1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    pom &gt; 5 ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(1 2 3 54 9 8 7  1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    pom &gt; 5 ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>vstup select: [:x | x &gt; 5]</do-it><do-it>| vstup velikost pom i vysledek |vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := 0.i := 1.velikost timesRepeat:  [ pom := vstup at: i.    vysledek := vysledek + pom.    i := i + 1.  ].^vysledek</do-it><do-it>vstup inject: 0 into: [:x :y | x+y]</do-it><do-it>vstup sum</do-it><do-it>VisualLauncher open</do-it><do-it>vysledek := 0.vstup do:  [ :x | vysledek := vysledek + 1.  ].^vysledek</do-it><do-it>9 // 2</do-it><do-it>|vstup vysledek velikost pom i|vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [    pom := vstup at: i.    pom // 2 = 1 ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>|vstup vysledek velikost pom i|vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [    pom := vstup at: i.    pom // 2 = 0 ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>|vstup vysledek velikost pom i|vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [    pom := vstup at: i.    ((pom // 2) = 0) ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>|vstup vysledek velikost pom i|vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [    pom := vstup at: i.    ((pom // 2) = 1) ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>|vstup vysledek velikost pom i|vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [    pom := vstup at: i.    vysledek add: pom // 2.    i := i + 1.  ].^vysledek</do-it><do-it>|vstup vysledek velikost pom i|vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [    pom := vstup at: i.    vysledek add: pom \\ 2.    i := i + 1.  ].^vysledek</do-it><do-it>vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [    pom := vstup at: i.    pom \\ 2 = 0 ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>vstup := #(1 2 3 54 9 8 7 1 2).velikost := vstup size.vysledek := List new.i := 1.velikost timesRepeat:  [    pom := vstup at: i.    pom \\ 2 = 1 ifTrue: [vysledek add: pom].    i := i + 1.  ].^vysledek</do-it><do-it>vstup select: [:x | x odd ]</do-it><do-it>vstup select: [:x | x even ]</do-it><do-it>$e isVowel</do-it><do-it>$h isVowel</do-it><do-it>vstup detect: [:x | x&gt;5]</do-it><do-it>vstup select: [:x | x &gt; 5 ]</do-it><do-it>vstup reject: [:x | x &gt; 5 ]</do-it><do-it>vstup reject: [:x | x &gt;= 5 ]</do-it><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-1999' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d1.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>Zakaznici select: [:x | x vek &gt; 20]</do-it><do-it>Zakaznici select: [:x | x vek &lt; 20]</do-it><do-it>Zakaznici select: [:x | x vek &gt; 20]</do-it><do-it>Vypujcky // [:x | x zakaznik jmeno = 'Pepa']</do-it><do-it>(Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]</do-it><do-it>(Vypujcky // [:x | x zakaznik jmeno = 'Pepa'])</do-it><do-it>(Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]</do-it><do-it>((Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]) flatten</do-it><do-it>(((Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]) flatten) collect: [:z | z cena]</do-it><do-it>((((Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]) flatten) collect: [:z | z cena]) sum</do-it><do-it>((((Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]) flatten) collect: [:z | z cena]) avg</do-it><do-it>(((((Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]) flatten) collect: [:z | z cena]) avg) asNumber</do-it><do-it>((((Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]) flatten) collect: [:z | z cena]) size</do-it><do-it>((((Vypujcky // [:x | x zakaznik jmeno = 'Pepa']) collect: [:y | y polozky]) flatten) collect: [:z | z cena]) sum</do-it><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2002' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d1.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozek">cenaPolozek	^(self polozky collect: [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozek">cenaPolozek	^(self polozky asBag collect: [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	| pocetDni |	pocetDni := vraceno subtractDate: vypujceno.	^pocetDni * self cenaPolozek</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkovaCena">celkovaCena	| pocetDni |	self vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: self vypujceno]		ifFalse: [pocetDni := self vraceno subtractDate: self vypujceno].	^pocetDni * self cenaPolozek</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:x | x zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky collect: [:v | v celkovaCena]) sum</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><do-it>Zakaznici select: [:x | x vek &gt; 20]</do-it><do-it>Zakaznici select: [:x | x vek &lt; 20]</do-it><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d1.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c1; add: d2; add: d4.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>Zakaznici select: [:x | x vek &lt; 20]</do-it><do-it>Vypujcky // [:v | v zakaznik jmeno = 'Pepa']</do-it><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d1.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>Vypujcky // [:v | v zakaznik jmeno = 'Pepa']</do-it><do-it>(Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]</do-it><do-it>((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten</do-it><do-it>(((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]) avg</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]) sum</do-it><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	pocetDni := vraceno subtractDate: vypujceno.	^pocetDni * self cenaPolozekZaDen</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: vypujceno]		ifFalse: [pocetDni := vraceno subtractDate: vypujceno].	^pocetDni * self cenaPolozekZaDen</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><remove-selector><class-id>Vypujcka</class-id> <selector>mojeVypujcky</selector></remove-selector><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaCelkem]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: vypujceno]		ifFalse: [pocetDni := vraceno subtractDate: vypujceno].	^pocetDni * self cenaPolozekZaDen</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><do-it>(Zakaznici // [:x | x vek &lt; 15])</do-it><do-it>(Zakaznici // [:x | x vek &lt; 15])</do-it><do-it>(Zakaznici // [:x | x vek &lt; 18])</do-it><do-it>(Zakaznici // [:x | x vek &lt; 15])</do-it><do-it>(Zakaznici // [:x | x vek &lt; 15]) size</do-it><do-it>(Zakaznici // [:x | x vek &lt; 15]) size = 0</do-it><do-it>(Zakaznici // [:x | x vek &lt; 15]) size = 0</do-it><do-it>(Zakaznici // [:x | x vek &lt; 18]) isEmpty</do-it><do-it>(Zakaznici // [:x | x vek &lt; 15]) isEmpty</do-it><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena pristupnost </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#pristupnost -&gt; Core.Number); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost:">pristupnost: anObject"generated by Daskalos"     pristupnost := (self checkValue: anObject forVariable: #pristupnost)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost">pristupnost"generated by Daskalos"     ^pristupnost</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.     pristupnost := nil.</body></methods><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 12;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';     pristupnost: 18;     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';     pristupnost: 12;     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c4; add: d1.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>Vypujcky // [:x | x zakaznik vek &lt; (x polozky &gt;&gt; [:y | y pristupnost]) max]</do-it><do-it>(Vypujcky // [:x | x zakaznik vek &lt; (x polozky &gt;&gt; [:y | y pristupnost]) max]) isEmpty</do-it><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kontrolaPristupnosti">kontrolaPristupnosti	^(self polozky &gt;&gt; [:x | x pristupnost]) max &lt;= self zakaznik vek</body></methods><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: vypujceno]		ifFalse: [pocetDni := vraceno subtractDate: vypujceno].	^pocetDni * self cenaPolozekZaDen</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><do-it>Zakaznici select: [:x | x vek &lt; 20]</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]) sum</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena])</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]) sum</do-it><do-it>Zakaznici // [:z | z vek &lt; 18]</do-it><do-it>(Zakaznici // [:z | z vek &lt; 18]) size = 0</do-it><do-it>(Zakaznici // [:z | z vek &lt; 15]) size = 0</do-it><do-it>(Zakaznici // [:z | z vek &lt; 18]) isEmpty</do-it><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena pristupnost </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pristupnost -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost:">pristupnost: anObject"generated by Daskalos"     pristupnost := (self checkValue: anObject forVariable: #pristupnost)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost">pristupnost"generated by Daskalos"     ^pristupnost</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.     pristupnost := nil.</body></methods><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 15;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';    pristupnost: 18;     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';    pristupnost: 13;    cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d1.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>Vypujcky // [: v | v zakaznik vek &lt; (v polozky &gt;&gt; [:x | x pristupnost]) max]</do-it><do-it>Vypujcky // [: v | v zakaznik vek &lt; (v polozky &gt;&gt; [:x | x pristupnost]) max]</do-it><do-it>(Vypujcky // [: v | v zakaznik vek &lt; (v polozky &gt;&gt; [:x | x pristupnost]) max]) isEmpty</do-it><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 15;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';    pristupnost: 18;     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';    pristupnost: 13;    cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c4; add: d1.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>(Vypujcky // [: v | v zakaznik vek &lt; (v polozky &gt;&gt; [:x | x pristupnost]) max]) isEmpty</do-it><do-it>(Vypujcky // [: v | v zakaznik vek &lt; (v polozky &gt;&gt; [:x | x pristupnost]) max])</do-it><do-it>(Vypujcky // [: v | v zakaznik vek &lt; (v polozky &gt;&gt; [:x | x pristupnost]) max]) isEmpty</do-it><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	^polozky &gt;&gt; [:x | x pristupnost] max &lt;= zakaznik vek</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	^(polozky &gt;&gt; [:x | x pristupnost]) max &lt;= zakaznik vek</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	"^(polozky &gt;&gt; [:x | x pristupnost]) max &lt;= zakaznik vek"	^polozky // [:p | p pristupnost &gt; zakaznik vek]</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	"^(polozky &gt;&gt; [:x | x pristupnost]) max &lt;= zakaznik vek"	^(polozky // [:p | p pristupnost &gt; zakaznik vek]) isEmpty</body></methods><do-it>(Vypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: vypujceno]		ifFalse: [pocetDni := vraceno subtractDate: vypujceno].	^pocetDni * self cenaPolozekZaDen</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><do-it>Vypujcky &gt;&gt; [:v | v cenaVypujcky]</do-it><do-it>(Vypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky &gt;&gt; [:v | v cenaVypujcky])</do-it><do-it>(Vypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d3.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>(Vypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky  asBag &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky &gt;&gt; [:v | v cenaVypujcky]) </do-it><do-it>(Vypujcky asBag &gt;&gt; [:v | v cenaVypujcky])</do-it><do-it>(Vypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>Zakaznici // [:z | z vek &lt; 18]</do-it><do-it>(Zakaznici // [:z | z vek &lt; 18]) size</do-it><do-it>(Zakaznici // [:z | z vek &lt; 18]) size = 0</do-it><do-it>(Zakaznici // [:z | z vek &lt; 15]) size = 0</do-it><do-it>(Zakaznici // [:z | z vek &lt; 15]) size = 0</do-it><do-it>(Zakaznici // [:z | z vek &lt; 18]) isEmpty</do-it><do-it>(Zakaznici // [:z | z vek &lt; 15]) isEmpty</do-it><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena pristupnost </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#pristupnost -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost:">pristupnost: anObject"generated by Daskalos"     pristupnost := (self checkValue: anObject forVariable: #pristupnost)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost">pristupnost"generated by Daskalos"     ^pristupnost</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.     pristupnost := nil.</body></methods><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 15;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';    pristupnost: 18;     cena: 25.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';    pristupnost: 12;     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d3.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max]</do-it><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max]) isEmpty</do-it><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max]) isEmpty</do-it><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 15;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';    pristupnost: 18;     cena: 26.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';    pristupnost: 12;     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d3.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d3.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 15;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';    pristupnost: 18;     cena: 26.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';    pristupnost: 12;     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d3.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d4.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 15;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';    pristupnost: 18;     cena: 26.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';    pristupnost: 12;     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d4.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d4.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max]) isEmpty</do-it><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max])</do-it><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max]) isEmpty</do-it><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	^zakaznik vek &gt;= (polozky &gt;&gt; [:p | p pristupnost]) max</body></methods><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2001' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 15;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';    pristupnost: 18;     cena: 26.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';    pristupnost: 12;     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d3.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d4.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><class><name>Avenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Incident</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Zaporak</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Avenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Avenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Avenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Avenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Avenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Avenger</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prezdivka </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Avenger class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prezdivka -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Avenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prezdivka:">prezdivka: anObject"generated by Daskalos"     prezdivka := (self checkValue: anObject forVariable: #prezdivka)</body></methods><methods><class-id>Avenger</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prezdivka">prezdivka"generated by Daskalos"     ^prezdivka</body></methods><methods><class-id>Avenger</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prezdivka := nil.</body></methods><class><name>Zaporak</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zaporak class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Zaporak</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zaporak</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zaporak</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Incident</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>misto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Incident class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#misto -&gt; Core.String); yourself)</body></methods><methods><class-id>Incident</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="misto:">misto: anObject"generated by Daskalos"     misto := (self checkValue: anObject forVariable: #misto)</body></methods><methods><class-id>Incident</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="misto">misto"generated by Daskalos"     ^misto</body></methods><methods><class-id>Incident</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     misto := nil.</body></methods><class><name>Incident</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>misto datum </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Incident class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#misto -&gt; Core.String); yourself)</body></methods><methods><class-id>Incident</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Incident</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Incident</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     misto := nil.     datum := nil.</body></methods><class><name>Incident</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>misto datum zaporak </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Incident class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#misto -&gt; Core.String); add: (#datum -&gt; Core.Date); add: (#zaporak -&gt; Core.Object); yourself)</body></methods><methods><class-id>Incident</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zaporak:">zaporak: anObject"generated by Daskalos"     zaporak := (self checkValue: anObject forVariable: #zaporak)</body></methods><methods><class-id>Incident</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zaporak">zaporak"generated by Daskalos"     ^zaporak</body></methods><methods><class-id>Incident</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     misto := nil.     datum := nil.     zaporak := nil.</body></methods><class><name>Incident</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>misto datum zaporak avengers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Incident class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#misto -&gt; Core.String); add: (#datum -&gt; Core.Date); add: (#zaporak -&gt; Core.Object); add: (#avengers -&gt; Core.Set); yourself)</body></methods><methods><class-id>Incident</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="avengers">avengers"generated by Daskalos"     ^avengers</body></methods><methods><class-id>Incident</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     misto := nil.     datum := nil.     zaporak := nil.     avengers := Set new.</body></methods><do-it>Avengers := Set new.Zaporaci := Set new.Incidenty := Set new.ironman := Avenger new.ironman jmeno: 'Tony Stark';            prezdivka: 'Ironman'.america := Avenger new.america jmeno: 'Steve Rodgers';            prezdivka: 'Kapitan Amerika'.hulk := Avenger new.hulk jmeno: 'Bruce Banner';       prezdivka: 'Hulk'.thor := Avenger new.thor jmeno: 'Thor Odinsson';      prezdivka: 'Thor'.widow := Avenger new.widow jmeno: 'Natasa Romanov';         prezdivka: 'Black Widow'.hawkeye := Avenger new.hawkeye jmeno: 'Clint Barton';            prezdivka: 'Hawkeye'.Avengers add: ironman; add: america; add: hulk; add: thor; add: widow; add: hawkeye.loki := Zaporak new.loki jmeno: 'Loki'.ultron := Zaporak new.ultron jmeno: 'Ultron'.wintersoldier := Zaporak new.wintersoldier jmeno: 'Winter Soldier'.redskull := Zaporak new.redskull jmeno: 'Red Skull'.Zaporaci add: loki; add: ultron; add: wintersoldier; add: redskull.i1 := Incident new.i1 misto: 'New York';    datum: '15 JUN 2012';    zaporak: loki.i1 avengers add: ironman; add: hulk; add: america; add: thor; add: widow; add: hawkeye.i2 := Incident new.i2 misto: 'Sokovia';   datum: '15 JUL 2015';   zaporak: ultron.i2   avengers add: ironman; add: hulk; add: america; add: thor; add: widow; add: hawkeye.i3 := Incident new.i3 misto: 'Nemecko';   datum: '15 DEC 1944';   zaporak: redskull.i3   avengers add: america.</do-it><do-it>Avengers := Set new.Zaporaci := Set new.Incidenty := Set new.ironman := Avenger new.ironman jmeno: 'Tony Stark';            prezdivka: 'Ironman'.america := Avenger new.america jmeno: 'Steve Rodgers';            prezdivka: 'Kapitan Amerika'.hulk := Avenger new.hulk jmeno: 'Bruce Banner';       prezdivka: 'Hulk'.thor := Avenger new.thor jmeno: 'Thor Odinsson';      prezdivka: 'Thor'.widow := Avenger new.widow jmeno: 'Natasa Romanov';         prezdivka: 'Black Widow'.hawkeye := Avenger new.hawkeye jmeno: 'Clint Barton';            prezdivka: 'Hawkeye'.Avengers add: ironman; add: america; add: hulk; add: thor; add: widow; add: hawkeye.loki := Zaporak new.loki jmeno: 'Loki'.ultron := Zaporak new.ultron jmeno: 'Ultron'.wintersoldier := Zaporak new.wintersoldier jmeno: 'Winter Soldier'.redskull := Zaporak new.redskull jmeno: 'Red Skull'.Zaporaci add: loki; add: ultron; add: wintersoldier; add: redskull.i1 := Incident new.i1 misto: 'New York';    datum: '15 JUN 2012' asDate;    zaporak: loki.i1 avengers add: ironman; add: hulk; add: america; add: thor; add: widow; add: hawkeye.i2 := Incident new.i2 misto: 'Sokovia';   datum: '15 JUL 2015' asDate;   zaporak: ultron.i2   avengers add: ironman; add: hulk; add: america; add: thor; add: widow; add: hawkeye.i3 := Incident new.i3 misto: 'Nemecko';   datum: '15 DEC 1944' asDate;   zaporak: redskull.i3   avengers add: america.</do-it><do-it>Avengers := Set new.Zaporaci := Set new.Incidenty := Set new.ironman := Avenger new.ironman jmeno: 'Tony Stark';            prezdivka: 'Ironman'.america := Avenger new.america jmeno: 'Steve Rodgers';            prezdivka: 'Kapitan Amerika'.hulk := Avenger new.hulk jmeno: 'Bruce Banner';       prezdivka: 'Hulk'.thor := Avenger new.thor jmeno: 'Thor Odinsson';      prezdivka: 'Thor'.widow := Avenger new.widow jmeno: 'Natasa Romanov';         prezdivka: 'Black Widow'.hawkeye := Avenger new.hawkeye jmeno: 'Clint Barton';            prezdivka: 'Hawkeye'.Avengers add: ironman; add: america; add: hulk; add: thor; add: widow; add: hawkeye.loki := Zaporak new.loki jmeno: 'Loki'.ultron := Zaporak new.ultron jmeno: 'Ultron'.wintersoldier := Zaporak new.wintersoldier jmeno: 'Winter Soldier'.redskull := Zaporak new.redskull jmeno: 'Red Skull'.Zaporaci add: loki; add: ultron; add: wintersoldier; add: redskull.i1 := Incident new.i1 misto: 'New York';    datum: '15 JUN 2012' asDate;    zaporak: loki.i1 avengers add: ironman; add: hulk; add: america; add: thor; add: widow; add: hawkeye.i2 := Incident new.i2 misto: 'Sokovia';   datum: '15 JUL 2015' asDate;   zaporak: ultron.i2   avengers add: ironman; add: hulk; add: america; add: thor; add: widow; add: hawkeye.i3 := Incident new.i3 misto: 'Nemecko';   datum: '15 DEC 1944' asDate;   zaporak: redskull.i3   avengers add: america.Incidenty add: i1; add: i2; add: i3.</do-it><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: vypujceno]		ifFalse: [pocetDni := vraceno subtractDate: vypujceno].	^pocetDni * self cenaPolozekZaDen</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	^zakaznik vek &gt;= (polozky &gt;&gt; [:p | p pristupnost]) max</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena pristupnost </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#pristupnost -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost">pristupnost"generated by Daskalos"     ^pristupnost</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost:">pristupnost: anObject"generated by Daskalos"     pristupnost := (self checkValue: anObject forVariable: #pristupnost)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.     pristupnost := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typ rokVyroby spz vlastnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Auto class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#spz -&gt; Core.String); add: (#vlastnik -&gt; Core.Object); add: (#typ -&gt; Core.String); add: (#rokVyroby -&gt; Core.Number); yourself)</body></methods><comment><class-id>Auto</class-id><body>Toto je trida, ktera implementuje objekty typu Auto</body></comment><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby">rokVyroby"generated by Daskalos"     ^rokVyroby</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby:">rokVyroby: anObject"generated by Daskalos"     rokVyroby := (self checkValue: anObject forVariable: #rokVyroby)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz">spz"generated by Daskalos"     ^spz</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz:">spz: anObject"generated by Daskalos"     spz := (self checkValue: anObject forVariable: #spz)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ">typ"generated by Daskalos"     ^typ</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ:">typ: anObject"generated by Daskalos"     typ := (self checkValue: anObject forVariable: #typ)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik">vlastnik"generated by Daskalos"     ^vlastnik</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik:">vlastnik: anObject"generated by Daskalos"     vlastnik := (self checkValue: anObject forVariable: #vlastnik)</body></methods><methods><class-id>Auto</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     typ := nil.     rokVyroby := nil.     spz := nil.     vlastnik := nil.</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garaz">garaz	^vlastnik adresa</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="musiSTK">musiSTK	^self stari &gt;= 5</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stari">stari	^Date today year - rokVyroby</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><comment><class-id>Osoba</class-id><body>Toto je trida, ktera implementuje objekty typu Osoba</body></comment><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     adresa := nil.</body></methods><class><name>Motorka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Auto removeFromSystem</do-it><do-it>Osoba removeFromSystem</do-it><do-it>Motorka removeFromSystem</do-it><do-it>VisualLauncher open</do-it><do-it>132 factorial</do-it><do-it>3.96 sin</do-it><do-it>$e isDigit</do-it><do-it>45 min: 78</do-it><do-it>45 min: 8</do-it><do-it>45 max: 8</do-it><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typ rokVyroby spz vlastnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Auto class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#spz -&gt; Core.String); add: (#vlastnik -&gt; Core.Object); add: (#typ -&gt; Core.String); add: (#rokVyroby -&gt; Core.Number); yourself)</body></methods><comment><class-id>Auto</class-id><body>Toto je trida, ktera implementuje objekty typu Auto</body></comment><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby">rokVyroby"generated by Daskalos"     ^rokVyroby</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby:">rokVyroby: anObject"generated by Daskalos"     rokVyroby := (self checkValue: anObject forVariable: #rokVyroby)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz">spz"generated by Daskalos"     ^spz</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz:">spz: anObject"generated by Daskalos"     spz := (self checkValue: anObject forVariable: #spz)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ">typ"generated by Daskalos"     ^typ</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ:">typ: anObject"generated by Daskalos"     typ := (self checkValue: anObject forVariable: #typ)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik">vlastnik"generated by Daskalos"     ^vlastnik</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik:">vlastnik: anObject"generated by Daskalos"     vlastnik := (self checkValue: anObject forVariable: #vlastnik)</body></methods><methods><class-id>Auto</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     typ := nil.     rokVyroby := nil.     spz := nil.     vlastnik := nil.</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garaz">garaz	^vlastnik adresa</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="musiSTK">musiSTK	^self stari &gt;= 5</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stari">stari	^Date today year - rokVyroby</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><comment><class-id>Osoba</class-id><body>Toto je trida, ktera implementuje objekty typu Osoba</body></comment><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     adresa := nil.</body></methods><class><name>Motorka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>VisualLauncher open</do-it><do-it>132 factorial</do-it><class><name>Qwertzui</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>ASDFG</name><environment>Smalltalk</environment><super>Qwertzui</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Dfgdff</name><environment>Smalltalk</environment><super>Qwertzui</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Lkjhgfd</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typ rokVyroby spz vlastnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Auto class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#spz -&gt; Core.String); add: (#vlastnik -&gt; Core.Object); add: (#typ -&gt; Core.String); add: (#rokVyroby -&gt; Core.Number); yourself)</body></methods><comment><class-id>Auto</class-id><body>Toto je trida, ktera implementuje objekty typu Auto</body></comment><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby">rokVyroby"generated by Daskalos"     ^rokVyroby</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby:">rokVyroby: anObject"generated by Daskalos"     rokVyroby := (self checkValue: anObject forVariable: #rokVyroby)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz">spz"generated by Daskalos"     ^spz</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz:">spz: anObject"generated by Daskalos"     spz := (self checkValue: anObject forVariable: #spz)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ">typ"generated by Daskalos"     ^typ</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ:">typ: anObject"generated by Daskalos"     typ := (self checkValue: anObject forVariable: #typ)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik">vlastnik"generated by Daskalos"     ^vlastnik</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik:">vlastnik: anObject"generated by Daskalos"     vlastnik := (self checkValue: anObject forVariable: #vlastnik)</body></methods><methods><class-id>Auto</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     typ := nil.     rokVyroby := nil.     spz := nil.     vlastnik := nil.</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garaz">garaz	^vlastnik adresa</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="musiSTK">musiSTK	^self stari &gt;= 5</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stari">stari	^Date today year - rokVyroby</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><comment><class-id>Osoba</class-id><body>Toto je trida, ktera implementuje objekty typu Osoba</body></comment><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     adresa := nil.</body></methods><do-it>Auta select: [:a | a rokVyroby &lt; 2000]</do-it><do-it>Auta select: [:a | a musiSTK]</do-it><do-it>(Auta select: [:a | a musiSTK]) collect: [:a | a vlastnik]</do-it><do-it>VisualLauncher open</do-it><do-it>132 factorial</do-it><do-it>3.96 sin</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#obor -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#zkousky -&gt; Core.Set); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#garant -&gt; Core.Object); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#predmet -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#predmet -&gt; Core.Object); add: (#datum -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zkousejici -&gt; Core.Object); add: (#predmet -&gt; Core.Object); add: (#datum -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     zkousejici := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum zkousejici vysledek </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zkousejici -&gt; Core.Object); add: (#predmet -&gt; Core.Object); add: (#datum -&gt; Core.Date); add: (#vysledek -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     zkousejici := nil.     vysledek := nil.</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#zkousky -&gt; Core.Set); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#garant -&gt; Core.Object); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum zkousejici vysledek </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zkousejici -&gt; Core.Object); add: (#predmet -&gt; Core.Object); add: (#datum -&gt; Core.Date); add: (#vysledek -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     zkousejici := nil.     vysledek := nil.</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Vyucujici</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Vyucujici removeFromSystem</do-it><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#predmet -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#predmet -&gt; Core.Object); add: (#datum -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.VyucujiciSet add: v1.Predmety := Set new.Predmety add: p1.</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><do-it>Student removeFromSystem</do-it><do-it>Vyucujici removeFromSystem</do-it><do-it>Osoba removeFromSystem</do-it><do-it>Predmet removeFromSystem</do-it><do-it>Zkouska removeFromSystem</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#zkousky -&gt; Core.Set); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#garant -&gt; Core.Object); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum zkousejici vysledek </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zkousejici -&gt; Core.Object); add: (#predmet -&gt; Core.Object); add: (#datum -&gt; Core.Date); add: (#vysledek -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     zkousejici := nil.     vysledek := nil.</body></methods><do-it>Vyucujici removeFromSystem</do-it><do-it>Student removeFromSystem</do-it><do-it>Osoba removeFromSystem</do-it><do-it>Predmet removeFromSystem</do-it><do-it>Zkouska removeFromSystem</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.VyucujiciSet add: v1.Predmety := Set new.Predmety add: p1.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 2.z1 zkousejici: v1.s1 zkousky add: z1.Zkousky := Set new.Zkousky add: z1.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.VyucujiciSet add: v1.Predmety := Set new.Predmety add: p1.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 2.z1 zkousejici: v1.s1 zkousky add: z1.Zkousky := Set new.Zkousky add: z1.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 1.s3 := Student new.s3 jmeno: 'TomÃ¡Å¡'.s3 prijmeni: 'MarnÃ½'.s3 obor: 'INFO'.s3 rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Martin'.v2 prijmeni: 'Stoces'.v2 kancelar: 'E305'.v3 := Vyucujici new.v3 jmeno: 'Helena'.v3 prijmeni: 'Brozova'.v3 kancelar: 'E140'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Programovani'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Uzita matematika pro informatiky'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 2.z1 zkousejici: v1.z2 := Zkouska new.z2 predmet: p2.z2 datum: '17-JAN-2019' asDate.z2 vysledek: 1.z2 zkousejici: v2.z3 := Zkouska new.z3 predmet: p3.z3 datum: '17-JAN-2019' asDate.z3 vysledek: 4.z3 zkousejici: v3.z4 := Zkouska new.z4 predmet: p3.z4 datum: '25-JAN-2019' asDate.z4 vysledek: 4.z4 zkousejici: v3.s1 zkousky add: z1.s2 zkousky add: z2.s3 zkousky add: z3; add: z4.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 1.s3 := Student new.s3 jmeno: 'TomÃ¡Å¡'.s3 prijmeni: 'MarnÃ½'.s3 obor: 'INFO'.s3 rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Martin'.v2 prijmeni: 'Stoces'.v2 kancelar: 'E305'.v3 := Vyucujici new.v3 jmeno: 'Helena'.v3 prijmeni: 'Brozova'.v3 kancelar: 'E140'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Programovani'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Uzita matematika pro informatiky'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 2.z1 zkousejici: v1.z2 := Zkouska new.z2 predmet: p2.z2 datum: '17-JAN-2019' asDate.z2 vysledek: 1.z2 zkousejici: v2.z3 := Zkouska new.z3 predmet: p3.z3 datum: '17-JAN-2019' asDate.z3 vysledek: 4.z3 zkousejici: v3.z4 := Zkouska new.z4 predmet: p3.z4 datum: '25-JAN-2019' asDate.z4 vysledek: 4.z4 zkousejici: v3.s1 zkousky add: z1.s2 zkousky add: z2.s3 zkousky add: z3; add: z4.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4.</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Vaclav'.v3 prijmeni: 'Vostrovsky'.v3 kancelar: 'E416'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Databazove systemy'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Vaclav'.v3 prijmeni: 'Vostrovsky'.v3 kancelar: 'E416'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Databazove systemy'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.z1 zkousejici: v1.z2 := Zkouska new.z2 predmet: p2.z2 datum: '19-JAN-2019' asDate.z2 vysledek: 1.z2 zkousejici: v2.z3 := Zkouska new.z3 predmet: p3.z3 datum: '15-JAN-2019' asDate.z3 vysledek: 4.z3 zkousejici: v3.z4 := Zkouska new.z4 predmet: p3.z4 datum: '22-JAN-2019' asDate.z4 vysledek: 3.z4 zkousejici: v3.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Vaclav'.v3 prijmeni: 'Vostrovsky'.v3 kancelar: 'E416'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Databazove systemy'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.z1 zkousejici: v1.z2 := Zkouska new.z2 predmet: p2.z2 datum: '19-JAN-2019' asDate.z2 vysledek: 1.z2 zkousejici: v2.z3 := Zkouska new.z3 predmet: p3.z3 datum: '15-JAN-2019' asDate.z3 vysledek: 4.z3 zkousejici: v3.z4 := Zkouska new.z4 predmet: p3.z4 datum: '22-JAN-2019' asDate.z4 vysledek: 3.z4 zkousejici: v3.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Vaclav'.v3 prijmeni: 'Vostrovsky'.v3 kancelar: 'E416'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Databazove systemy'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.z1 zkousejici: v1.z2 := Zkouska new.z2 predmet: p2.z2 datum: '19-JAN-2019' asDate.z2 vysledek: 1.z2 zkousejici: v2.z3 := Zkouska new.z3 predmet: p3.z3 datum: '15-JAN-2019' asDate.z3 vysledek: 4.z3 zkousejici: v3.z4 := Zkouska new.z4 predmet: p3.z4 datum: '22-JAN-2019' asDate.z4 vysledek: 3.z4 zkousejici: v3.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4.s1 zkousky add: z1.s2 zkousky add: z2; add: z3.s3 zkousky add: z4.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Vaclav'.v3 prijmeni: 'Vostrovsky'.v3 kancelar: 'E416'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Databazove systemy'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.z1 zkousejici: v1.z2 := Zkouska new.z2 predmet: p2.z2 datum: '19-JAN-2019' asDate.z2 vysledek: 1.z2 zkousejici: v2.z3 := Zkouska new.z3 predmet: p3.z3 datum: '15-JAN-2019' asDate.z3 vysledek: 4.z3 zkousejici: v3.z4 := Zkouska new.z4 predmet: p3.z4 datum: '22-JAN-2019' asDate.z4 vysledek: 3.z4 zkousejici: v3.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4.s1 zkousky add: z1.s2 zkousky add: z2; add: z3.s3 zkousky add: z4.</do-it><do-it>Studenti select: [:x | x rocnik = 2]</do-it><do-it>Studenti reject: [:x | x rocnik = 2]</do-it><do-it>Predmety collect: [:x | x garant]</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Vaclav'.v3 prijmeni: 'Vostrovsky'.v3 kancelar: 'E416'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Databazove systemy'.p3 garant: v3.p4 := Predmet new.p4 nazev: 'Objektove a relacni databaze'.p4 garant: v1.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3; add: p4.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.z1 zkousejici: v1.z2 := Zkouska new.z2 predmet: p2.z2 datum: '19-JAN-2019' asDate.z2 vysledek: 1.z2 zkousejici: v2.z3 := Zkouska new.z3 predmet: p3.z3 datum: '15-JAN-2019' asDate.z3 vysledek: 4.z3 zkousejici: v3.z4 := Zkouska new.z4 predmet: p3.z4 datum: '22-JAN-2019' asDate.z4 vysledek: 3.z4 zkousejici: v3.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4.s1 zkousky add: z1.s2 zkousky add: z2; add: z3.s3 zkousky add: z4.</do-it><do-it>Predmety collect: [:x | x garant]</do-it><do-it>Predmety asBag collect: [:x | x garant]</do-it><do-it>(Predmety asBag collect: [:x | x garant])</do-it><do-it>(Predmety asBag collect: [:x | x garant]) asSet</do-it><do-it>Predmety size</do-it><do-it>Predmety isEmpty</do-it><do-it>Predmet allInstances</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Vaclav'.v3 prijmeni: 'Vostrovsky'.v3 kancelar: 'E416'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Databazove systemy'.p3 garant: v3.p4 := Predmet new.p4 nazev: 'Objektove a relacni databaze'.p4 garant: v1.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3; add: p4.z1 := Zkouska new.z1 predmet: p1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.z1 zkousejici: v1.z2 := Zkouska new.z2 predmet: p2.z2 datum: '19-JAN-2019' asDate.z2 vysledek: 1.z2 zkousejici: v2.z3 := Zkouska new.z3 predmet: p3.z3 datum: '15-JAN-2019' asDate.z3 vysledek: 4.z3 zkousejici: v3.z4 := Zkouska new.z4 predmet: p3.z4 datum: '22-JAN-2019' asDate.z4 vysledek: 3.z4 zkousejici: v3.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4.s1 zkousky add: z1.s2 zkousky add: z2; add: z3.s3 zkousky add: z4.</do-it><do-it>Predmet allInstances</do-it><do-it>Predmet allInstances</do-it><do-it>Predmet allInstances</do-it><do-it>Predmet allInstances</do-it><do-it>Predmet allInstances</do-it><do-it>Predmety isEmpty</do-it><do-it>Predmet allInstances</do-it><do-it>Predmet allInstances</do-it><do-it>Student removeFromSystem</do-it><do-it>Vyucujici removeFromSystem</do-it><do-it>Osoba removeFromSystem</do-it><do-it>Predmet removeFromSystem</do-it><do-it>Zkouska removeFromSystem</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><do-it>Predmet allInstances</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#obor -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#obor -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zkousky -&gt; Core.Set); add: (#obor -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#kancelar -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#predmet -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zkousejici -&gt; Core.Object); add: (#predmet -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     zkousejici := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet zkousejici datum </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     zkousejici := nil.     datum := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet zkousejici datum vysledek </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#vysledek -&gt; Core.Number); add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     zkousejici := nil.     datum := nil.     vysledek := nil.</body></methods><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.Predmety := Set new.VyucujiciSet add: v1.Predmety add: p1.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.Predmety := Set new.VyucujiciSet add: v1.Predmety add: p1.s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.Studenti := Set new.Studenti add: s1.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.Predmety := Set new.VyucujiciSet add: v1.Predmety add: p1.s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.Studenti := Set new.Studenti add: s1.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 vysledek: 1.z1 datum: '15-JAN-2019' asDate.s1 zkousky add: z1.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.Predmety := Set new.VyucujiciSet add: v1.Predmety add: p1.s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.Studenti := Set new.Studenti add: s1.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 vysledek: 1.z1 datum: '15-JAN-2019' asDate.s1 zkousky add: z1.</do-it><class><name>OSOBA</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>OSOBA renameTo: #Osoba</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#zkousky -&gt; Core.Set); add: (#rocnik -&gt; Core.Number); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#kancelar -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#predmet -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#predmet -&gt; Core.Object); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     zkousejici := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet zkousejici datum </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     zkousejici := nil.     datum := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet zkousejici datum vysledek </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); add: (#predmet -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     zkousejici := nil.     datum := nil.     vysledek := nil.</body></methods><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.VyucujiciSet := Set new.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s1 zkousky add: z1.VyucujiciSet := Set new.VyucujiciSet add: v1.Predmety := Set new.Predmety add: p1.Zkousky := Set new.Zkousky add: p1.Studenti := Set new.Studenti add: s1.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s1 zkousky add: z1.VyucujiciSet := Set new.VyucujiciSet add: v1.Predmety := Set new.Predmety add: p1.Zkousky := Set new.Zkousky add: z1.Studenti := Set new.Studenti add: s1.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s1 zkousky add: z1.VyucujiciSet := Set new.VyucujiciSet add: v1.Predmety := Set new.Predmety add: p1.Zkousky := Set new.Zkousky add: z1.Studenti := Set new.Studenti add: s1.</do-it><do-it>v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Michal'.v2 prijmeni: 'Stoces'.v2 kancelar: 'E305'.v3 := Vyucujici new.v3 jmeno: 'Josef'.v3 prijmeni: 'Pavlicek'.v3 kancelar: 'E405'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Programovani'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Interakce clovek-pocitac'.p3 garant: v3.p4 := Predmet new.p4 nazev: 'Objektove a relacni databaze'.p4 garant: v1.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2019' asDate.z1 vysledek: 1.s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s1 zkousky add: z1.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3; add: p4.Zkousky := Set new.Zkousky add: z1.Studenti := Set new.Studenti add: s1.</do-it><do-it>Predmety collect: [:x | x garant]</do-it><do-it>Predmety asBag collect: [:x | x garant]</do-it><do-it>(Predmety asBag collect: [:x | x garant])</do-it><do-it>(Predmety asBag collect: [:x | x garant]) asSet</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.VyucujiciSet add: v1.Predmety := Set new.Predmety add: p1.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri'.v3 prijmeni: 'Brozek'.v3 kancelar: 'E412'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri'.v3 prijmeni: 'Brozek'.v3 kancelar: 'E412'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2019' asDate. "DD-MMM-YYYY kde MMM je 3 pismenna zkratka mesice v EN"z1 vysledek: 2.z2 := Zkouska new.z2 predmet: p1.z2 zkousejici: v1.z2 datum: '01-15-2019' asDate.  "MM-DD-YYYY, vse cisla"z2 vysledek: 1.z3 := Zkouska new.z3 predmet: p1.z3 zkousejici: v3.z3 datum: 'JAN-15-2019' asDate. "MMM-DD-YYYY kde MMM je 3 pismenna zkratka mesice v EN"z3 vysledek: 4.z4 := Zkouska new.z4 predmet: p1.z4 zkousejici: v3.z4 datum: '20-JAN-2019' asDate.z4 vysledek: 1.z5 := Zkouska new.z5 predmet: p2.z5 zkousejici: v2.z5 datum: '17-JAN-2019' asDate.z5 vysledek: 2.z6 := Zkouska new.z6 predmet: p2.z6 zkousejici: v2.z6 datum: '17-JAN-2019' asDate.z6 vysledek: 3.z7 := Zkouska new.z7 predmet: p3.z7 zkousejici: v3.z7 datum: '20-JAN-2019' asDate.z7 vysledek: 1.z8 := Zkouska new.z8 predmet: p3.z8 zkousejici: v3.z8 datum: '25-JAN-2019' asDate.z8 vysledek: 4.z9 := Zkouska new.z9 predmet: p3.z9 zkousejici: v3.z9 datum: '30-JAN-2019' asDate.z9 vysledek: 2.s1 zkousky add: z1.s2 zkousky add: z2; add: z5; add: z7.s3 zkousky add: z3; add: z4; add: z6; add: z8; add: z9.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4; add: z5; add: z6; add: z7; add: z8; add: z9.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef'.v2 prijmeni: 'Pavlicek'.v2 kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri'.v3 prijmeni: 'Brozek'.v3 kancelar: 'E412'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2019' asDate. "DD-MMM-YYYY kde MMM je 3 pismenna zkratka mesice v EN"z1 vysledek: 2.z2 := Zkouska new.z2 predmet: p1.z2 zkousejici: v1.z2 datum: '01-15-2019' asDate.  "MM-DD-YYYY, vse cisla"z2 vysledek: 1.z3 := Zkouska new.z3 predmet: p1.z3 zkousejici: v3.z3 datum: 'JAN-15-2019' asDate. "MMM-DD-YYYY kde MMM je 3 pismenna zkratka mesice v EN"z3 vysledek: 4.z4 := Zkouska new.z4 predmet: p1.z4 zkousejici: v3.z4 datum: '20-JAN-2019' asDate.z4 vysledek: 1.z5 := Zkouska new.z5 predmet: p2.z5 zkousejici: v2.z5 datum: '17-JAN-2019' asDate.z5 vysledek: 2.z6 := Zkouska new.z6 predmet: p2.z6 zkousejici: v2.z6 datum: '17-JAN-2019' asDate.z6 vysledek: 3.z7 := Zkouska new.z7 predmet: p3.z7 zkousejici: v3.z7 datum: '20-JAN-2019' asDate.z7 vysledek: 1.z8 := Zkouska new.z8 predmet: p3.z8 zkousejici: v3.z8 datum: '25-JAN-2019' asDate.z8 vysledek: 4.z9 := Zkouska new.z9 predmet: p3.z9 zkousejici: v3.z9 datum: '30-JAN-2019' asDate.z9 vysledek: 2.s1 zkousky add: z1.s2 zkousky add: z2; add: z5; add: z7.s3 zkousky add: z3; add: z4; add: z6; add: z8; add: z9.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4; add: z5; add: z6; add: z7; add: z8; add: z9.</do-it><do-it>Zkousky // [:x | x vysledek = 1]</do-it><do-it>Zkousky // [:x | x zkousejici kancelar = 'E418']</do-it><do-it>Zkousky // [:x | x vysledek = 1 &amp; x zkousejici kancelar = 'E418']</do-it><do-it>Zkousky select: [:x | x vysledek &gt; 4]</do-it><do-it>(Zkousky select: [:x | x vysledek &gt; 4]) isEmpty</do-it><do-it>(Zkousky select: [:x | x vysledek &gt; 4]) size = 0</do-it><do-it>(Zkousky select: [:x | x vysledek &gt; 3]) size = 0</do-it><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances select: [:s | s zkousky includes: self]</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances detect: [:s | s zkousky includes: self]</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.VyucujiciSet := Set new.VyucujiciSet add: v1.Predmety := Set new.Predmety add: p1.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v3.z1 vysledek: 4.z1 datum: '15-JAN-2019' asDate.z2 := Zkouska new.z2 predmet: p1.z2 zkousejici: v1.z2 vysledek: 1.z2 datum: 'JAN-20-2019' asDate.z3 := Zkouska new.z3 predmet: p1.z3 zkousejici: v1.z3 vysledek: 2.z3 datum: '01-13-2018' asDate.z4 := Zkouska new.z4 predmet: p1.z4 zkousejici: v1.z4 vysledek: 3.z4 datum: '13-JAN-2018' asDate.z5 := Zkouska new.z5 predmet: p2.z5 zkousejici: v2.z5 vysledek: 1.z5 datum: '15-JAN-2019' asDate.z6 := Zkouska new.z6 predmet: p2.z6 zkousejici: v3.z6 vysledek: 3.z6 datum: '15-JAN-2019' asDate.z7 := Zkouska new.z7 predmet: p3.z7 zkousejici: v3.z7 vysledek: 2.z7 datum: '25-JAN-2019' asDate.z8 := Zkouska new.z8 predmet: p3.z8 zkousejici: v3.z8 vysledek: 4.z8 datum: '18-JAN-2019' asDate.z9 := Zkouska new.z9 predmet: p3.z9 zkousejici: v3.z9 vysledek: 4.z9 datum: '22-JAN-2019' asDate.z10 := Zkouska new.z10 predmet: p3.z10 zkousejici: v3.z10 vysledek: 3.z10 datum: '27-JAN-2019' asDate.s1 zkousky add: z1; add: z2.s2 zkousky add: z3; add: z5; add: z7.s3 zkousky add: z4; add: z6; add: z8; add: z9; add: z10.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4; add: z5; add: z6; add: z7; add: z8; add: z9; add: z10.</do-it><do-it>s1 := Student new.s1 jmeno: 'Karel'.s1 prijmeni: 'Novak'.s1 obor: 'INFO'.s1 rocnik: 1.s2 := Student new.s2 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    obor: 'INFO';    rocnik: 2.s3 := Student new.s3 jmeno: 'Tomas';    prijmeni: 'Marny';    obor: 'INFO';    rocnik: 2.Studenti := Set new.Studenti add: s1; add: s2; add: s3.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2.p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.VyucujiciSet := Set new.VyucujiciSet add: v1; add: v2; add: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v3.z1 vysledek: 4.z1 datum: '15-JAN-2019' asDate.z2 := Zkouska new.z2 predmet: p1.z2 zkousejici: v1.z2 vysledek: 1.z2 datum: 'JAN-20-2019' asDate.z3 := Zkouska new.z3 predmet: p1.z3 zkousejici: v1.z3 vysledek: 2.z3 datum: '01-13-2018' asDate.z4 := Zkouska new.z4 predmet: p1.z4 zkousejici: v1.z4 vysledek: 3.z4 datum: '13-JAN-2018' asDate.z5 := Zkouska new.z5 predmet: p2.z5 zkousejici: v2.z5 vysledek: 1.z5 datum: '15-JAN-2019' asDate.z6 := Zkouska new.z6 predmet: p2.z6 zkousejici: v3.z6 vysledek: 3.z6 datum: '15-JAN-2019' asDate.z7 := Zkouska new.z7 predmet: p3.z7 zkousejici: v3.z7 vysledek: 2.z7 datum: '25-JAN-2019' asDate.z8 := Zkouska new.z8 predmet: p3.z8 zkousejici: v3.z8 vysledek: 4.z8 datum: '18-JAN-2019' asDate.z9 := Zkouska new.z9 predmet: p3.z9 zkousejici: v3.z9 vysledek: 4.z9 datum: '22-JAN-2019' asDate.z10 := Zkouska new.z10 predmet: p3.z10 zkousejici: v3.z10 vysledek: 3.z10 datum: '27-JAN-2019' asDate.s1 zkousky add: z1; add: z2.s2 zkousky add: z3; add: z5; add: z7.s3 zkousky add: z4; add: z6; add: z8; add: z9; add: z10.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4; add: z5; add: z6; add: z7; add: z8; add: z9; add: z10.</do-it><do-it>Zkousky // [:z | z vysledek = 4]</do-it><do-it>Zkousky // [:z | z vysledek = 4 &amp; z zkousejici kancelar = 'E412']</do-it><do-it>Zkousky // [:z | z vysledek = 4 &amp; z zkousejici kancelar = 'E412']</do-it><do-it>Zkousky // [:z | z vysledek = 3 &amp; z zkousejici kancelar = 'E412']</do-it><do-it>Zkousky // [:z | z vysledek = 3]</do-it><do-it>Zkousky // [:z | z vysledek = 3 &amp; z zkousejici kancelar = 'E412']</do-it><do-it>Zkousky // [:z | z vysledek &gt; 4]</do-it><do-it>(Zkousky // [:z | z vysledek &gt; 4]) isEmpty</do-it><do-it>(Zkousky // [:z | z vysledek &gt; 4]) size = 0</do-it><do-it>(Zkousky // [:z | z vysledek &gt; 3]) size = 0</do-it><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances select: [:s | s zkousky includes: self]</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances detect: [:s | s zkousky includes: self]</body></methods><do-it>Studenti // [:s | s zkousky contains: [:z | z vysledek = 4] ]</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances detect: [:s | s zkousky includes: self]</body></methods><do-it>Studenti // [:s | s rocnik = 2]</do-it><do-it>Predmety // [:p | p garant kancelar = 'E405']</do-it><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^self zkousky &gt;&gt; [:z | z znamka]</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^self zkousky &gt;&gt; [:z | z vysledek]</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^self zkousky asBag &gt;&gt; [:z | z vysledek]</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg	"	^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg asFloat	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg asFloat	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg asFloat	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg asFloat"</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vysledek">vysledek	"generated by Daskalos"	^vysledek asFloat</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg asFloat"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg asFloat	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg asFloat"</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vysledek">vysledek	"generated by Daskalos"	^vysledek</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^Zkouska allInstances // [:z | z zkousejici = self]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^Zkouska allInstances // [:z | z zkousejici = self]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^((Zkouska allInstances // [:z | z zkousejici = self]) asBag 		&gt;&gt; [:v | v vysledek]) avg</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^((Zkouska allInstances // [:z | z zkousejici = self]) asBag 		&gt;&gt; [:v | v vysledek]) avg 		asFloat</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vyhazuje">vyhazuje	^Zkouska allInstances // [:z | z zkousejici = self] &gt;&gt; [:v | v vysledek]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vyhazuje">vyhazuje	^Zkouska allInstances // [:z | z zkousejici = self] &gt;&gt; [:v | v vysledek] 		includes: 4</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	^(self prumernaZnamka &lt; 2 &amp; self vyhazuje) ~= True</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	^(self prumernaZnamka &lt; 2 &amp; self vyhazuje) ~= true</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	^(self prumernaZnamka &lt; 2 &amp; self vyhazuje) ~= true</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	^(self prumernaZnamka &lt; 2 &amp; self vyhazuje) ~= true</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	^self prumernaZnamka &lt; 2 &amp; self vyhazuje not</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	self vyhazuje 		ifTrue: [^'zlÃ½']		ifFalse: [self prumernaZnamka &lt; 2 ifTrue: [^'hodny'] ifFalse: [^'prisny']]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	self vyhazuje 		ifTrue: [^'zly']		ifFalse: [self prumernaZnamka &lt; 2 ifTrue: [^'hodny'] ifFalse: [^'prisny']]</body></methods><do-it>VisualLauncher open</do-it><do-it>Date today</do-it><do-it>Date today subtractDate: ('1-APR-2019' asDate)</do-it><do-it>Date today subtractDate: ('1-APR-2000' asDate)</do-it><do-it>(Date today subtractDate: ('1-APR-2000' asDate)) / 365.224</do-it><do-it>((Date today subtractDate: ('1-APR-2000' asDate)) / 365.224) truncated</do-it><do-it>((Date today subtractDate: ('1-APR-2000' asDate)) / 365.224) asInteger</do-it><do-it>((Date today subtractDate: ('1-APR-2000' asDate)) / 365.224) floor</do-it><do-it>((Date today subtractDate: ('1-APR-2000' asDate)) / 365.224) rounded</do-it><do-it>((Date today subtractDate: ('1-DEC-2000' asDate)) / 365.224) rounded</do-it><do-it>((Date today subtractDate: ('1-DEC-2000' asDate)) / 365.224)</do-it><do-it>((Date today subtractDate: ('1-SEP-2000' asDate)) / 365.224)</do-it><do-it>((Date today subtractDate: ('1-SEP-2000' asDate)) / 365.224) rounded</do-it><do-it>((Date today subtractDate: ('1-SEP-2000' asDate)) / 365.224) floor</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances detect: [:s | s zkousky includes: self]</body></methods><do-it>VyucujiciSet // [:v | v kancelar = 'E405']</do-it><do-it>Predmety // [:p | p garant kancelar = 'E405' ]</do-it><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^self zkousky collect: [:z | z vysledek]</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^self zkousky asBag collect: [:z | z vysledek]</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag collect: [:z | z vysledek]) average</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag collect: [:z | z vysledek]) avg</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag collect: [:z | z vysledek]) avg asFloat</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag collect: [:z | z vysledek]) // [:v | v &lt; 4]) avg 		asFloat</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	"	^((self zkousky asBag collect: [:z | z vysledek]) // [:v | v &lt; 4]) avg 		asFloat"	^((self zkousky asBag select: [:z | z vysledek &lt; 4]) &gt;&gt; [:v | v vysledek]) 		avg asFloat</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag collect: [:z | z vysledek]) // [:v | v &lt; 4]) avg 		asFloat	"	^((self zkousky asBag select: [:z | z vysledek &lt; 4]) &gt;&gt; [:v | v vysledek]) 		avg asFloat"</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^Zkouska allInstances // [:z | z zkousejici = self]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^(Zkouska allInstances // [:z | z zkousejici = self]) asBag 		&gt;&gt; [:v | v vysledek]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^((Zkouska allInstances // [:z | z zkousejici = self]) asBag 		&gt;&gt; [:v | v vysledek]) avg 		asFloat</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vyhazuje">vyhazuje	^Zkouska allInstances // [:z | (z zkousejici = self &amp; z vysledek) = 4]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vyhazuje">vyhazuje	^(Zkouska allInstances // [:z | (z zkousejici = self &amp; z vysledek) = 4]) 		isEmpty not</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	self vyhazuje 		ifTrue: [^'je zly']		ifFalse: 			[self prumernaZnamka &lt; 2 ifTrue: [^'je hodny'] ifFalse: [^'je prisny']]</body></methods><do-it>VisualLauncher open</do-it><do-it>Date today</do-it><do-it>Date today subtractDate: '1-APR-2019' asDate</do-it><do-it>Date today subtractDate: '1-APR-2000' asDate</do-it><do-it>(Date today subtractDate: '1-APR-2000' asDate) / 365.2422</do-it><do-it>((Date today subtractDate: '1-APR-2000' asDate) / 365.2422) asInteger</do-it><do-it>((Date today subtractDate: '1-APR-2000' asDate) / 365.2422) truncated</do-it><do-it>((Date today subtractDate: '1-APR-2000' asDate) / 365.2422) rounded</do-it><do-it>((Date today subtractDate: '1-SEP-2000' asDate) / 365.2422)</do-it><do-it>((Date today subtractDate: '1-SEP-2000' asDate) / 365.2422) rounded</do-it><do-it>((Date today subtractDate: '1-SEP-2000' asDate) / 365.2422) floor</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg asFloat	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg asFloat"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	self vyhazuje 		ifTrue: [^'zly']		ifFalse: [self prumernaZnamka &lt; 2 ifTrue: [^'hodny'] ifFalse: [^'prisny']]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^((Zkouska allInstances // [:z | z zkousejici = self]) asBag 		&gt;&gt; [:v | v vysledek]) avg 		asFloat</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vyhazuje">vyhazuje	^Zkouska allInstances // [:z | z zkousejici = self] &gt;&gt; [:v | v vysledek] 		includes: 4</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances detect: [:s | s zkousky includes: self]</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vysledek">vysledek	"generated by Daskalos"	^vysledek</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><do-it>VisualLauncher open</do-it><do-it>Date today subtractDate: ('1-SEP-2000' asDate)</do-it><do-it>(Date today subtractDate: ('1-SEP-2000' asDate)) / 365.224</do-it><do-it>((Date today subtractDate: ('1-SEP-2000' asDate)) / 365.224) floor</do-it><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: vypujceno]		ifFalse: [pocetDni := vraceno subtractDate: vypujceno].	^pocetDni * self cenaPolozekZaDen</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	^zakaznik vek &gt;= (polozky &gt;&gt; [:p | p pristupnost]) max</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena pristupnost </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#pristupnost -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost">pristupnost"generated by Daskalos"     ^pristupnost</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost:">pristupnost: anObject"generated by Daskalos"     pristupnost := (self checkValue: anObject forVariable: #pristupnost)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.     pristupnost := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><do-it>(Vypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky&gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky // [:v | v zakaznik jmeno = 'Pepa'])</do-it><do-it>((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky])</do-it><do-it>((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten</do-it><do-it>(((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]) sum</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg asFloat	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg asFloat"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	self vyhazuje 		ifTrue: [^'zly']		ifFalse: [self prumernaZnamka &lt; 2 ifTrue: [^'hodny'] ifFalse: [^'prisny']]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^((Zkouska allInstances // [:z | z zkousejici = self]) asBag 		&gt;&gt; [:v | v vysledek]) avg 		asFloat</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vyhazuje">vyhazuje	^Zkouska allInstances // [:z | z zkousejici = self] &gt;&gt; [:v | v vysledek] 		includes: 4</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances detect: [:s | s zkousky includes: self]</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vysledek">vysledek	"generated by Daskalos"	^vysledek</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><do-it>Predmety // [:p | p garant kancelar = 'E405']</do-it><do-it>VisualLauncher open</do-it><do-it>Date today subtractDate: ('1-SEP-2000' asDate)</do-it><do-it>(Date today subtractDate: ('1-SEP-2000' asDate)) / 365.2422</do-it><do-it>((Date today subtractDate: ('1-SEP-2000' asDate)) / 365.2422) floor</do-it><do-it>((Date today subtractDate: ('1-SEP-2000' asDate)) / 365.2422) truncated</do-it><do-it>((Date today subtractDate: ('1-SEP-2000' asDate)) / 365.2422) asInteger</do-it><do-it>Student removeFromSystem</do-it><do-it>Vyucujici removeFromSystem</do-it><do-it>Osoba removeFromSystem</do-it><do-it>Predmet removeFromSystem</do-it><do-it>Zkouska removeFromSystem</do-it><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: vypujceno]		ifFalse: [pocetDni := vraceno subtractDate: vypujceno].	^pocetDni * self cenaPolozekZaDen</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	^zakaznik vek &gt;= (polozky &gt;&gt; [:p | p pristupnost]) max</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena pristupnost </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#pristupnost -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost">pristupnost"generated by Daskalos"     ^pristupnost</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost:">pristupnost: anObject"generated by Daskalos"     pristupnost := (self checkValue: anObject forVariable: #pristupnost)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.     pristupnost := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max]) isEmpty</do-it><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max])</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.</body></methods><class><name>Investor</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jeInvestorem procentoAkci </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Investor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jeInvestorem -&gt; Core.Object); add: (#procentoAkci -&gt; Core.Number); yourself)</body></methods><methods><class-id>Investor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jeInvestorem">jeInvestorem"generated by Daskalos"     ^jeInvestorem</body></methods><methods><class-id>Investor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jeInvestorem:">jeInvestorem: anObject"generated by Daskalos"     jeInvestorem := (self checkValue: anObject forVariable: #jeInvestorem)</body></methods><methods><class-id>Investor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="procentoAkci">procentoAkci"generated by Daskalos"     ^procentoAkci</body></methods><methods><class-id>Investor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="procentoAkci:">procentoAkci: anObject"generated by Daskalos"     procentoAkci := (self checkValue: anObject forVariable: #procentoAkci)</body></methods><methods><class-id>Investor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jeInvestorem := nil.     procentoAkci := nil.</body></methods><class><name>Zamestnanec</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pracujePro chovaZvire </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zamestnanec class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#chovaZvire -&gt; Core.Object); add: (#prijmeni -&gt; Core.String); add: (#pracujePro -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zamestnanec</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="chovaZvire">chovaZvire"generated by Daskalos"     ^chovaZvire</body></methods><methods><class-id>Zamestnanec</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="chovaZvire:">chovaZvire: anObject"generated by Daskalos"     chovaZvire := (self checkValue: anObject forVariable: #chovaZvire)</body></methods><methods><class-id>Zamestnanec</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pracujePro">pracujePro"generated by Daskalos"     ^pracujePro</body></methods><methods><class-id>Zamestnanec</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pracujePro:">pracujePro: anObject"generated by Daskalos"     pracujePro := (self checkValue: anObject forVariable: #pracujePro)</body></methods><methods><class-id>Zamestnanec</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     pracujePro := nil.     chovaZvire := nil.</body></methods><class><name>Zvire</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno vek vaha pohlavi </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zvire class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#vaha -&gt; Core.Object); add: (#jmeno -&gt; Core.String); add: (#pohlavi -&gt; Core.String); add: (#vek -&gt; Core.Number); yourself)</body></methods><methods><class-id>Zvire</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zvire</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zvire</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pohlavi">pohlavi"generated by Daskalos"     ^pohlavi</body></methods><methods><class-id>Zvire</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pohlavi:">pohlavi: anObject"generated by Daskalos"     pohlavi := (self checkValue: anObject forVariable: #pohlavi)</body></methods><methods><class-id>Zvire</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vaha">vaha"generated by Daskalos"     ^vaha</body></methods><methods><class-id>Zvire</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vaha:">vaha: anObject"generated by Daskalos"     vaha := (self checkValue: anObject forVariable: #vaha)</body></methods><methods><class-id>Zvire</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vek">vek"generated by Daskalos"     ^vek</body></methods><methods><class-id>Zvire</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vek:">vek: anObject"generated by Daskalos"     vek := (self checkValue: anObject forVariable: #vek)</body></methods><methods><class-id>Zvire</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     vek := nil.     vaha := nil.     pohlavi := nil.</body></methods><class><name>Obojzivelnik</name><environment>Smalltalk</environment><super>Zvire</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jedovaty </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Obojzivelnik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pohlavi -&gt; Core.String); add: (#jedovaty -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#vaha -&gt; Core.Object); add: (#vek -&gt; Core.Number); yourself)</body></methods><methods><class-id>Obojzivelnik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jedovaty">jedovaty"generated by Daskalos"     ^jedovaty</body></methods><methods><class-id>Obojzivelnik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jedovaty:">jedovaty: anObject"generated by Daskalos"     jedovaty := (self checkValue: anObject forVariable: #jedovaty)</body></methods><methods><class-id>Obojzivelnik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jedovaty := nil.</body></methods><class><name>Savec</name><environment>Smalltalk</environment><super>Zvire</super><private>false</private><indexed-type>none</indexed-type><inst-vars>masozravy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Savec class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pohlavi -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#vaha -&gt; Core.Object); add: (#vek -&gt; Core.Number); add: (#masozravy -&gt; Core.String); yourself)</body></methods><methods><class-id>Savec</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="masozravy">masozravy"generated by Daskalos"     ^masozravy</body></methods><methods><class-id>Savec</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="masozravy:">masozravy: anObject"generated by Daskalos"     masozravy := (self checkValue: anObject forVariable: #masozravy)</body></methods><methods><class-id>Savec</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     masozravy := nil.</body></methods><class><name>Ptak</name><environment>Smalltalk</environment><super>Zvire</super><private>false</private><indexed-type>none</indexed-type><inst-vars>vodni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Ptak class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pohlavi -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#vaha -&gt; Core.Object); add: (#vek -&gt; Core.Number); add: (#vodni -&gt; Core.String); yourself)</body></methods><methods><class-id>Ptak</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vodni">vodni"generated by Daskalos"     ^vodni</body></methods><methods><class-id>Ptak</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vodni:">vodni: anObject"generated by Daskalos"     vodni := (self checkValue: anObject forVariable: #vodni)</body></methods><methods><class-id>Ptak</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     vodni := nil.</body></methods><class><name>ZOO</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev podporovatel mesto maZvire datumZalozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>ZOO class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datumZalozeni -&gt; Core.Date); add: (#nazev -&gt; Core.String); add: (#maZvire -&gt; Core.Object); add: (#podporovatel -&gt; Core.Object); add: (#mesto -&gt; Core.String); yourself)</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumZalozeni">datumZalozeni"generated by Daskalos"     ^datumZalozeni</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumZalozeni:">datumZalozeni: anObject"generated by Daskalos"     datumZalozeni := (self checkValue: anObject forVariable: #datumZalozeni)</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="maZvire">maZvire"generated by Daskalos"     ^maZvire</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="maZvire:">maZvire: anObject"generated by Daskalos"     maZvire := (self checkValue: anObject forVariable: #maZvire)</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mesto">mesto"generated by Daskalos"     ^mesto</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mesto:">mesto: anObject"generated by Daskalos"     mesto := (self checkValue: anObject forVariable: #mesto)</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="podporovatel">podporovatel"generated by Daskalos"     ^podporovatel</body></methods><methods><class-id>ZOO</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="podporovatel:">podporovatel: anObject"generated by Daskalos"     podporovatel := (self checkValue: anObject forVariable: #podporovatel)</body></methods><methods><class-id>ZOO</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     podporovatel := nil.     mesto := nil.     maZvire := nil.     datumZalozeni := nil.</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg asFloat	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg asFloat"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	self vyhazuje 		ifTrue: [^'zly']		ifFalse: [self prumernaZnamka &lt; 2 ifTrue: [^'hodny'] ifFalse: [^'prisny']]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^((Zkouska allInstances // [:z | z zkousejici = self]) asBag 		&gt;&gt; [:v | v vysledek]) avg 		asFloat</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vyhazuje">vyhazuje	^Zkouska allInstances // [:z | z zkousejici = self] &gt;&gt; [:v | v vysledek] 		includes: 4</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances detect: [:s | s zkousky includes: self]</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vysledek">vysledek	"generated by Daskalos"	^vysledek</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="initialize">initialize	"generated by Daskalos"	super initialize.	jmeno := nil.	prijmeni := nil</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>obor rocnik zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#obor -&gt; Core.String); add: (#rocnik -&gt; Core.Number); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik">rocnik"generated by Daskalos"     ^rocnik</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rocnik:">rocnik: anObject"generated by Daskalos"     rocnik := (self checkValue: anObject forVariable: #rocnik)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     obor := nil.     rocnik := nil.     zkousky := Set new.</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cistyPrumer">cistyPrumer	^((self zkousky asBag &gt;&gt; [:z | z vysledek]) // [:v | v &lt; 4]) avg asFloat	"^((self zkousky asBag // [:z | z vysledek &lt; 4]) &gt;&gt; [:v | vysledek]) ) avg asFloat"</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumer">prumer	^(self zkousky asBag &gt;&gt; [:z | z vysledek]) avg asFloat</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#kancelar -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jeHodny">jeHodny	self vyhazuje 		ifTrue: [^'zly']		ifFalse: [self prumernaZnamka &lt; 2 ifTrue: [^'hodny'] ifFalse: [^'prisny']]</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^((Zkouska allInstances // [:z | z zkousejici = self]) asBag 		&gt;&gt; [:v | v vysledek]) avg 		asFloat</body></methods><methods><class-id>Vyucujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vyhazuje">vyhazuje	^Zkouska allInstances // [:z | z zkousejici = self] &gt;&gt; [:v | v vysledek] 		includes: 4</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     garant := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmet datum vysledek zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#vysledek -&gt; Core.Number); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmet := nil.     datum := nil.     vysledek := nil.     zkousejici := nil.</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="student">student	^Student allInstances detect: [:s | s zkousky includes: self]</body></methods><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vysledek">vysledek	"generated by Daskalos"	^vysledek</body></methods><do-it>Studenti // [:s | s zkousky contains: [:x | x vysledek = 4]]</do-it><do-it>Studenti // [:s | s zkousky contains: [:x | x vysledek = 1]]</do-it><do-it>Studenti // [:s | s zkousky contains: [:x | x vysledek = 2]]</do-it><do-it>Studenti // [:s | s zkousky contains: [:x | x vysledek = 4]]</do-it><methods><class-id>Zkouska</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject 	"generated by Daskalos"	predmet := self checkValue: anObject forVariable: #predmet</body></methods><do-it>Student removeFromSystem</do-it><do-it>Vyucujici removeFromSystem</do-it><do-it>Osoba removeFromSystem</do-it><do-it>Predmet removeFromSystem</do-it><do-it>Zkouska removeFromSystem</do-it><class><name>Zakaznik</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa datumNarozeni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zakaznik class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#datumNarozeni -&gt; Core.Date); yourself)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Zakaznik</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Zakaznik</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.     datumNarozeni := nil.</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="jePlnolety">jePlnolety	^self vek &gt;= 18</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeUtrata">mojeUtrata	^(self mojeVypujcky &gt;&gt; [:v | v cenaVypujcky]) sum</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mojeVypujcky">mojeVypujcky	^Vypujcka allInstances select: [:i | i zakaznik = self]</body></methods><methods><class-id>Zakaznik</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	^((Date today subtractDate: self datumNarozeni) / 365.2422) truncated</body></methods><class><name>Vypujcka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zakaznik polozky vypujceno vraceno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vypujcka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#polozky -&gt; Core.Set); add: (#vraceno -&gt; Core.Date); add: (#vypujceno -&gt; Core.Date); add: (#zakaznik -&gt; Core.Object); yourself)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="polozky">polozky"generated by Daskalos"     ^polozky</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno">vraceno"generated by Daskalos"     ^vraceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vraceno:">vraceno: anObject"generated by Daskalos"     vraceno := (self checkValue: anObject forVariable: #vraceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno">vypujceno"generated by Daskalos"     ^vypujceno</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vypujceno:">vypujceno: anObject"generated by Daskalos"     vypujceno := (self checkValue: anObject forVariable: #vypujceno)</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik">zakaznik"generated by Daskalos"     ^zakaznik</body></methods><methods><class-id>Vypujcka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zakaznik:">zakaznik: anObject"generated by Daskalos"     zakaznik := (self checkValue: anObject forVariable: #zakaznik)</body></methods><methods><class-id>Vypujcka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     zakaznik := nil.     polozky := Set new.     vypujceno := nil.     vraceno := nil.</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaPolozekZaDen">cenaPolozekZaDen	^(self polozky asBag &gt;&gt; [:p | p cena]) sum</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cenaVypujcky">cenaVypujcky	| pocetDni |	vraceno isNil 		ifTrue: [pocetDni := Date today subtractDate: vypujceno]		ifFalse: [pocetDni := vraceno subtractDate: vypujceno].	^pocetDni * self cenaPolozekZaDen</body></methods><methods><class-id>Vypujcka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupnostOK">pristupnostOK	^zakaznik vek &gt;= (polozky &gt;&gt; [:p | p pristupnost]) max</body></methods><class><name>Disk</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev zanr cena pristupnost </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Disk class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zanr -&gt; Core.String); add: (#pristupnost -&gt; Core.Number); add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); yourself)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost">pristupnost"generated by Daskalos"     ^pristupnost</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pristupnost:">pristupnost: anObject"generated by Daskalos"     pristupnost := (self checkValue: anObject forVariable: #pristupnost)</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr">zanr"generated by Daskalos"     ^zanr</body></methods><methods><class-id>Disk</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zanr:">zanr: anObject"generated by Daskalos"     zanr := (self checkValue: anObject forVariable: #zanr)</body></methods><methods><class-id>Disk</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.     zanr := nil.     cena := nil.     pristupnost := nil.</body></methods><class><name>CD</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interpret </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>CD class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#zanr -&gt; Core.String); add: (#interpret -&gt; Core.String); yourself)</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret">interpret"generated by Daskalos"     ^interpret</body></methods><methods><class-id>CD</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="interpret:">interpret: anObject"generated by Daskalos"     interpret := (self checkValue: anObject forVariable: #interpret)</body></methods><methods><class-id>CD</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     interpret := nil.</body></methods><class><name>Dvd</name><environment>Smalltalk</environment><super>Disk</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reziser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Dvd class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#cena -&gt; Core.Number); add: (#reziser -&gt; Core.String); add: (#zanr -&gt; Core.String); yourself)</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser">reziser"generated by Daskalos"     ^reziser</body></methods><methods><class-id>Dvd</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reziser:">reziser: anObject"generated by Daskalos"     reziser := (self checkValue: anObject forVariable: #reziser)</body></methods><methods><class-id>Dvd</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     reziser := nil.</body></methods><do-it>Vypujcka allInstances</do-it><do-it>Vypujcka allInstances &gt;&gt; [:x | x cenaVypujcky]</do-it><do-it>(Vypujcka allInstances &gt;&gt; [:x | x cenaVypujcky]) sum</do-it><do-it>(Vypujcka allInstances &gt;&gt; [:x | x cenaVypujcky]) </do-it><do-it>Zakaznici select: [:x | x vek &lt; 20]</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]) sum</do-it><do-it>(Vypujcky // [:v | v zakaznik jmeno = 'Pepa'])</do-it><do-it>((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky])</do-it><do-it>(((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten)</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena])</do-it><do-it>((((Vypujcky // [:v | v zakaznik jmeno = 'Pepa']) &gt;&gt; [:x | x polozky]) flatten) &gt;&gt; [:p | p cena]) sum</do-it><do-it>(Vypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky  &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky asBag &gt;&gt; [:v | v cenaVypujcky]) sum</do-it><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max]) isEmpty</do-it><do-it>Zakaznici := Set new.Vypujcky := Set new.Disky := Set new.z1 := Zakaznik new.z1 jmeno: 'Pepa'.z1 prijmeni: 'Prasatko'.z1 adresa: 'Praha'.z1 datumNarozeni: '20-JAN-1990' asDate.z2 := Zakaznik new.z2 jmeno: 'Karel';    prijmeni: 'Vomacka';    adresa: 'Kladno';    datumNarozeni: '5-AUG-2000' asDate.z3 := Zakaznik new.z3 jmeno: 'Frantisek';    prijmeni: 'Dobrota';    adresa: 'Blizka Vesnice';    datumNarozeni: '20-NOV-1980' asDate.Zakaznici add: z1; add: z2; add: z3.c1 := CD new.c1 nazev: 'Roots Bloody Roots';    interpret: 'Sepultura';    zanr: 'metal';    pristupnost: 15;    cena: 25.c2 := CD new.c2 nazev: 'Sisters of Mercy';    interpret: 'Sisters of Mercy';    zanr: 'rock';    pristupnost: 12;    cena: 25.c3 := CD new.c3 nazev: 'Bleach';    interpret: 'Nirvana';    zanr: 'grunge';    pristupnost: 12;    cena: 25.c4 := CD new.c4 nazev: 'Plna taska';    interpret: 'Eva a Vasek';    zanr: 'psychedelicky hardcore';    pristupnost: 18;    cena: 15.d1 := Dvd new.d1 nazev: 'Fargo';    zanr: 'krimi';    reziser: 'bratri Cohenovi';    pristupnost: 15;    cena: 30.d2 := Dvd new.d2 nazev: 'Noc na zemi';     zanr: 'drama';     reziser: 'Jim Jarmusch';    pristupnost: 15;     cena: 30.d3 := Dvd new.d3 nazev: 'Krouzek sebevrahu';     zanr: 'horor';     reziser: 'Shion Sono';    pristupnost: 18;     cena: 26.d4 := Dvd new.d4 nazev: 'Rogue One';     zanr: 'scifi';     reziser: 'Garreth Edwards';    pristupnost: 12;     cena: 35.Disky add: c1; add: c2; add: c3; add: c4.Disky add: d1; add: d2; add: d3; add: d4.v1 := Vypujcka new.v1 zakaznik: z1.v1 polozky add: c1; add: d2; add: d4.v1 vypujceno: '28-FEB-2017' asDate.v1 vraceno: '2-MAR-2017' asDate.v2 := Vypujcka new.v2 zakaznik: z2.v2 polozky add: c3; add: d3.v2 vypujceno: '28-MAR-2017' asDate.v2 vraceno: '30-MAR-2017' asDate.v3 := Vypujcka new.v3 zakaznik: z1.v3 polozky add: c2; add: d1; add: d4.v3 vypujceno: '7-APR-2017' asDate.v4 := Vypujcka new.v4 zakaznik: z3.v4 polozky add: c2; add: d3.v4 vypujceno: '20-MAR-2017' asDate.v4 vraceno: '22-MAR-2017' asDate.Vypujcky add: v1; add: v2; add: v3; add: v4.</do-it><do-it>(Vypujcky // [:v | v zakaznik vek &lt; (v polozky &gt;&gt; [:p | p pristupnost]) max]) isEmpty</do-it><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     adresa := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>predmety </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#predmety -&gt; Core.List); add: (#jmeno -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmety">predmety"generated by Daskalos"     ^predmety</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     predmety := List new.</body></methods><class><name>StudijniSkupina</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cislo obor studenti </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>StudijniSkupina class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#cislo -&gt; Core.Number); add: (#obor -&gt; Core.String); add: (#studenti -&gt; Core.Set); yourself)</body></methods><methods><class-id>StudijniSkupina</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo">cislo"generated by Daskalos"     ^cislo</body></methods><methods><class-id>StudijniSkupina</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo:">cislo: anObject"generated by Daskalos"     cislo := (self checkValue: anObject forVariable: #cislo)</body></methods><methods><class-id>StudijniSkupina</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor">obor"generated by Daskalos"     ^obor</body></methods><methods><class-id>StudijniSkupina</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="obor:">obor: anObject"generated by Daskalos"     obor := (self checkValue: anObject forVariable: #obor)</body></methods><methods><class-id>StudijniSkupina</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="studenti">studenti"generated by Daskalos"     ^studenti</body></methods><methods><class-id>StudijniSkupina</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     cislo := nil.     obor := nil.     studenti := Set new.</body></methods><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Vyucujici</name><environment>Smalltalk</environment><super>Osoba</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Vyucujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#kancelar -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#adresa -&gt; Core.String); add: (#prijmeni -&gt; Core.String); yourself)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar:">kancelar: anObject"generated by Daskalos"     kancelar := (self checkValue: anObject forVariable: #kancelar)</body></methods><methods><class-id>Vyucujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kancelar">kancelar"generated by Daskalos"     ^kancelar</body></methods><methods><class-id>Vyucujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kancelar := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>garant </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#garant -&gt; Core.Object); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant:">garant: anObject"generated by Daskalos"     garant := (self checkValue: anObject forVariable: #garant)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="garant">garant"generated by Daskalos"     ^garant</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     garant := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>garant nazev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); add: (#garant -&gt; Core.Object); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     garant := nil.     nazev := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>student </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#student -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="student:">student: anObject"generated by Daskalos"     student := (self checkValue: anObject forVariable: #student)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="student">student"generated by Daskalos"     ^student</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     student := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>student zkousejici </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#zkousejici -&gt; Core.Object); add: (#student -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici:">zkousejici: anObject"generated by Daskalos"     zkousejici := (self checkValue: anObject forVariable: #zkousejici)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousejici">zkousejici"generated by Daskalos"     ^zkousejici</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     student := nil.     zkousejici := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>student zkousejici predmet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#student -&gt; Core.Object); add: (#predmet -&gt; Core.Object); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := (self checkValue: anObject forVariable: #predmet)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     student := nil.     zkousejici := nil.     predmet := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>student zkousejici predmet vysledek </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#vysledek -&gt; Core.Number); add: (#student -&gt; Core.Object); add: (#predmet -&gt; Core.Object); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek:">vysledek: anObject"generated by Daskalos"     vysledek := (self checkValue: anObject forVariable: #vysledek)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vysledek">vysledek"generated by Daskalos"     ^vysledek</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     student := nil.     zkousejici := nil.     predmet := nil.     vysledek := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>student zkousejici predmet vysledek datum </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#vysledek -&gt; Core.Number); add: (#student -&gt; Core.Object); add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); add: (#zkousejici -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     datum := (self checkValue: anObject forVariable: #datum)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     student := nil.     zkousejici := nil.     predmet := nil.     vysledek := nil.     datum := nil.</body></methods><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.</do-it><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.Pedagogove add: v1; add: v2; add: v3.</do-it><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.Pedagogove add: v1; add: v2; add: v3.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.</do-it><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.Pedagogove add: v1; add: v2; add: v3.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.</do-it><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.Pedagogove add: v1; add: v2; add: v3.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.</do-it><do-it>'10-JAN-2020' asDate</do-it><do-it>'10 January 2020' asDate</do-it><do-it>'10 01 2020' asDate</do-it><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.Pedagogove add: v1; add: v2; add: v3.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 student: s1;     predmet: p1;     zkousejici: v3;     vysledek: 4.z1 datum: '10-JAN-2020' asDate.z2 := Zkouska new.z2 student: s1;     predmet: p1;     zkousejici: v1;     vysledek: 1.z2 datum: '13-JAN-2020' asDate.</do-it><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.Pedagogove add: v1; add: v2; add: v3.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 student: s1;     predmet: p1;     zkousejici: v3;     vysledek: 4.z1 datum: '10-JAN-2020' asDate.z2 := Zkouska new.z2 student: s1;     predmet: p1;     zkousejici: v1;     vysledek: 1.z2 datum: '13-JAN-2020' asDate.Zkousky := Set new.Zkousky add: z1; add: z2.</do-it><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.s3 := Student new.s3 jmeno: 'Tomas'.s3 prijmeni: 'Marny'.s3 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.Studenti add: s3.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.Pedagogove add: v1; add: v2; add: v3.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2020' asDate. "DD-MMM-YYYY kde MMM je 3 pismenna zkratka mesice v EN"z1 vysledek: 2.z2 := Zkouska new.z2 predmet: p1.z2 zkousejici: v1.z2 datum: '01-15-2020' asDate.  "MM-DD-YYYY, vse cisla"z2 vysledek: 1.z3 := Zkouska new.z3 predmet: p1.z3 zkousejici: v3.z3 datum: 'JAN-15-2020' asDate. "MMM-DD-YYYY kde MMM je 3 pismenna zkratka mesice v EN"z3 vysledek: 4.z4 := Zkouska new.z4 predmet: p1.z4 zkousejici: v3.z4 datum: '20-JAN-2020' asDate.z4 vysledek: 1.z5 := Zkouska new.z5 predmet: p2.z5 zkousejici: v2.z5 datum: '17-JAN-2020' asDate.z5 vysledek: 2.z6 := Zkouska new.z6 predmet: p2.z6 zkousejici: v2.z6 datum: '17-JAN-2020' asDate.z6 vysledek: 3.z7 := Zkouska new.z7 predmet: p3.z7 zkousejici: v3.z7 datum: '20-JAN-2020' asDate.z7 vysledek: 1.z8 := Zkouska new.z8 predmet: p3.z8 zkousejici: v3.z8 datum: '25-JAN-2020' asDate.z8 vysledek: 4.z9 := Zkouska new.z9 predmet: p3.z9 zkousejici: v3.z9 datum: '30-JAN-2020' asDate.z9 vysledek: 2.Zkousky := Set new.Zkousky add: z1; add: z2.</do-it><do-it>Studenti := Set new.StudijniSkupiny := Set new.s1 := Student new.s1 jmeno: 'Pepa'.s1 prijmeni: 'Novak'.s1 adresa: 'Praha'.s2 := Student new.s2 jmeno: 'Karel'.s2 prijmeni: 'Vomacka'.s2 adresa: 'Kolin'.s3 := Student new.s3 jmeno: 'Tomas'.s3 prijmeni: 'Marny'.s3 adresa: 'Kolin'.Studenti add: s1.Studenti add: s2.Studenti add: s3.sk1 := StudijniSkupina new.sk1 cislo: 1.sk1 obor: 'Info'.sk1 studenti add: s1.sk1 studenti add: s2.StudijniSkupiny add: sk1.v1 := Vyucujici new.v1 jmeno: 'Vojtech'.v1 prijmeni: 'Merunka'.v1 kancelar: 'E418'.v2 := Vyucujici new.v2 jmeno: 'Josef';    prijmeni: 'Pavlicek';    kancelar: 'E405'.v3 := Vyucujici new.v3 jmeno: 'Jiri';    prijmeni: 'Brozek';    kancelar: 'E412'.Pedagogove := Set new.Pedagogove add: v1; add: v2; add: v3.p1 := Predmet new.p1 nazev: 'Objektove modelovani'.p1 garant: v1.p2 := Predmet new.p2 nazev: 'Interakce clovek-pocitac'.p2 garant: v2. p3 := Predmet new.p3 nazev: 'Komponentova tvorba SW'.p3 garant: v3.Predmety := Set new.Predmety add: p1; add: p2; add: p3.z1 := Zkouska new.z1 student: s1.z1 predmet: p1.z1 zkousejici: v1.z1 datum: '15-JAN-2020' asDate. "DD-MMM-YYYY kde MMM je 3 pismenna zkratka mesice v EN"z1 vysledek: 2.z2 := Zkouska new.z2 student: s2.z2 predmet: p1.z2 zkousejici: v1.z2 datum: '01-15-2020' asDate.  "MM-DD-YYYY, vse cisla"z2 vysledek: 1.z3 := Zkouska new.z3 student: s3.z3 predmet: p1.z3 zkousejici: v3.z3 datum: 'JAN-15-2020' asDate. "MMM-DD-YYYY kde MMM je 3 pismenna zkratka mesice v EN"z3 vysledek: 4.z4 := Zkouska new.z4 student: s3.z4 predmet: p1.z4 zkousejici: v3.z4 datum: '20-JAN-2020' asDate.z4 vysledek: 1.z5 := Zkouska new.z5 student: s2.z5 predmet: p2.z5 zkousejici: v2.z5 datum: '17-JAN-2020' asDate.z5 vysledek: 2.z6 := Zkouska new.z6 student: s1.z6 predmet: p2.z6 zkousejici: v2.z6 datum: '17-JAN-2020' asDate.z6 vysledek: 3.z7 := Zkouska new.z7 student: s3.z7 predmet: p3.z7 zkousejici: v3.z7 datum: '20-JAN-2020' asDate.z7 vysledek: 1.z8 := Zkouska new.z8 student: s3.z8 predmet: p3.z8 zkousejici: v3.z8 datum: '25-JAN-2020' asDate.z8 vysledek: 4.z9 := Zkouska new.z9 student: s1.z9 predmet: p3.z9 zkousejici: v3.z9 datum: '30-JAN-2020' asDate.z9 vysledek: 2.Zkousky := Set new.Zkousky add: z1; add: z2; add: z3; add: z4; add: z5; add: z6; add: z7; add: z8; add: z9.</do-it><class><name>Uzivatel</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Uzivatel</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Uzivatel class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Uzivatel</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Uzivatel</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Uzivatel</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.</body></methods><class><name>Letiste</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kod nazev mesto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Letiste class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#kod -&gt; Core.String); add: (#nazev -&gt; Core.String); add: (#mesto -&gt; Core.String); yourself)</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kod">kod"generated by Daskalos"     ^kod</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kod:">kod: anObject"generated by Daskalos"     kod := (self checkValue: anObject forVariable: #kod)</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mesto">mesto"generated by Daskalos"     ^mesto</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mesto:">mesto: anObject"generated by Daskalos"     mesto := (self checkValue: anObject forVariable: #mesto)</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Letiste</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kod := nil.     nazev := nil.     mesto := nil.</body></methods><methods><class-id>Letiste</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="frekvenceLetu">frekvenceLetu	"vypocita v kolika letech se jednotliva letiste nachazeji (ze bud z letiste odleta nebo tam prileta)"	^(Let allInstances select: [:e | e zLetiste = self]) size 		+ (Let allInstances select: [:e | e naLetiste = self]) size</body></methods><class><name>Sedadlo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oznaceni trida uDveri </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Sedadlo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#oznaceni -&gt; Core.String); add: (#trida -&gt; Core.String); add: (#uDveri -&gt; Core.Number); yourself)</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oznaceni">oznaceni"generated by Daskalos"     ^oznaceni</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oznaceni:">oznaceni: anObject"generated by Daskalos"     oznaceni := (self checkValue: anObject forVariable: #oznaceni)</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="trida">trida"generated by Daskalos"     ^trida</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="trida:">trida: anObject"generated by Daskalos"     trida := (self checkValue: anObject forVariable: #trida)</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="uDveri">uDveri"generated by Daskalos"     ^uDveri</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="uDveri:">uDveri: anObject"generated by Daskalos"     uDveri := (self checkValue: anObject forVariable: #uDveri)</body></methods><methods><class-id>Sedadlo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     oznaceni := nil.     trida := nil.     uDveri := nil.</body></methods><class><name>Cestujici</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni datumNarozeni stat cisloDokladu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Cestujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#cisloDokladu -&gt; Core.Number); add: (#datumNarozeni -&gt; Core.Date); add: (#stat -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cisloDokladu">cisloDokladu"generated by Daskalos"     ^cisloDokladu</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cisloDokladu:">cisloDokladu: anObject"generated by Daskalos"     cisloDokladu := (self checkValue: anObject forVariable: #cisloDokladu)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="stat">stat"generated by Daskalos"     ^stat</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="stat:">stat: anObject"generated by Daskalos"     stat := (self checkValue: anObject forVariable: #stat)</body></methods><methods><class-id>Cestujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     datumNarozeni := nil.     stat := nil.     cisloDokladu := nil.</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkemUtraceno">celkemUtraceno	"vypocita, kolik celkem cestujici utratil celkove za letenky"	| select total |	total := 0.	select := (Letenka allInstances select: [:e | e patri = self]) 				collect: [:t | t cena].	select do: [:e | total := total + e].	^total</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pocetLetenek">pocetLetenek	"vypocita celkovy pocet letenek, co si jednotlivi cestujici zakoupili"	^(Letenka allInstances select: [:e | e patri = self]) size</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	"vrati vek osoby (v pripade chybejicich atributu vraci -1)"	datumNarozeni isNil 		ifTrue: [^-1]		ifFalse: [^((Date today subtractDate: datumNarozeni) / 365) truncated]</body></methods><class><name>Letenka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cislo spoj rezervovaneMisto cena patri pocetZavazadel prednostniNastup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Letenka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prednostniNastup -&gt; Core.Number); add: (#pocetZavazadel -&gt; Core.Number); add: (#rezervovaneMisto -&gt; Core.Object); add: (#spoj -&gt; Core.Object); add: (#patri -&gt; Core.Object); add: (#cislo -&gt; Core.Number); add: (#cena -&gt; Core.Number); yourself)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo">cislo"generated by Daskalos"     ^cislo</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo:">cislo: anObject"generated by Daskalos"     cislo := (self checkValue: anObject forVariable: #cislo)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patri">patri"generated by Daskalos"     ^patri</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patri:">patri: anObject"generated by Daskalos"     patri := (self checkValue: anObject forVariable: #patri)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetZavazadel">pocetZavazadel"generated by Daskalos"     ^pocetZavazadel</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetZavazadel:">pocetZavazadel: anObject"generated by Daskalos"     pocetZavazadel := (self checkValue: anObject forVariable: #pocetZavazadel)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prednostniNastup">prednostniNastup"generated by Daskalos"     ^prednostniNastup</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prednostniNastup:">prednostniNastup: anObject"generated by Daskalos"     prednostniNastup := (self checkValue: anObject forVariable: #prednostniNastup)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rezervovaneMisto">rezervovaneMisto"generated by Daskalos"     ^rezervovaneMisto</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rezervovaneMisto:">rezervovaneMisto: anObject"generated by Daskalos"     rezervovaneMisto := (self checkValue: anObject forVariable: #rezervovaneMisto)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spoj">spoj"generated by Daskalos"     ^spoj</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spoj:">spoj: anObject"generated by Daskalos"     spoj := (self checkValue: anObject forVariable: #spoj)</body></methods><methods><class-id>Letenka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     cislo := nil.     spoj := nil.     rezervovaneMisto := nil.     cena := nil.     patri := nil.     pocetZavazadel := nil.     prednostniNastup := nil.</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="doplatekExtraZavazadlo">doplatekExtraZavazadlo	"v pripade, ze cestujici ma vice nez jedno zavazadlo, bude platit poplatek za extra zavazadlo"	pocetZavazadel &gt; 1 ifTrue: [^'ano'] ifFalse: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty isNil not 		ifTrue: [spoj zpozdeniMinuty &gt; 179 ifTrue: [^'ano'] ifFalse: [^'ne']]		ifFalse: [^'ne']</body></methods><class><name>Let</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cislo zLetiste naLetiste datumOdletu casOdletu datumPriletu casPriletu zpozdeniMinuty </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Let class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#casPriletu -&gt; Core.Number); add: (#datumOdletu -&gt; Core.Date); add: (#cislo -&gt; Core.Number); add: (#zpozdeniMinuty -&gt; Core.Number); add: (#zLetiste -&gt; Core.Object); add: (#datumPriletu -&gt; Core.Date); add: (#casOdletu -&gt; Core.Number); add: (#naLetiste -&gt; Core.Object); yourself)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casOdletu">casOdletu"generated by Daskalos"     ^casOdletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casOdletu:">casOdletu: anObject"generated by Daskalos"     casOdletu := (self checkValue: anObject forVariable: #casOdletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casPriletu">casPriletu"generated by Daskalos"     ^casPriletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casPriletu:">casPriletu: anObject"generated by Daskalos"     casPriletu := (self checkValue: anObject forVariable: #casPriletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo">cislo"generated by Daskalos"     ^cislo</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo:">cislo: anObject"generated by Daskalos"     cislo := (self checkValue: anObject forVariable: #cislo)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumOdletu">datumOdletu"generated by Daskalos"     ^datumOdletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumOdletu:">datumOdletu: anObject"generated by Daskalos"     datumOdletu := (self checkValue: anObject forVariable: #datumOdletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumPriletu">datumPriletu"generated by Daskalos"     ^datumPriletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumPriletu:">datumPriletu: anObject"generated by Daskalos"     datumPriletu := (self checkValue: anObject forVariable: #datumPriletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naLetiste">naLetiste"generated by Daskalos"     ^naLetiste</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naLetiste:">naLetiste: anObject"generated by Daskalos"     naLetiste := (self checkValue: anObject forVariable: #naLetiste)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zLetiste">zLetiste"generated by Daskalos"     ^zLetiste</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zLetiste:">zLetiste: anObject"generated by Daskalos"     zLetiste := (self checkValue: anObject forVariable: #zLetiste)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zpozdeniMinuty:">zpozdeniMinuty: anObject"generated by Daskalos"     zpozdeniMinuty := (self checkValue: anObject forVariable: #zpozdeniMinuty)</body></methods><methods><class-id>Let</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     cislo := nil.     zLetiste := nil.     naLetiste := nil.     datumOdletu := nil.     casOdletu := nil.     datumPriletu := nil.     casPriletu := nil.     zpozdeniMinuty := nil.</body></methods><methods><class-id>Let</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="delkaLetu">delkaLetu	"comment stating purpose of message"	</body></methods><methods><class-id>Let</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="letDokoncen">letDokoncen	zpozdeniMinuty isNil not ifTrue: [^'ano'] ifFalse: [^'ne']</body></methods><methods><class-id>Let</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="zpozdeniMinuty">zpozdeniMinuty	"generated by Daskalos"	zpozdeniMinuty isNil not ifTrue: [^zpozdeniMinuty] ifFalse: [^'-1']</body></methods><class><name>Letiste</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kod nazev mesto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Letiste class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#kod -&gt; Core.String); add: (#nazev -&gt; Core.String); add: (#mesto -&gt; Core.String); yourself)</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kod">kod"generated by Daskalos"     ^kod</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kod:">kod: anObject"generated by Daskalos"     kod := (self checkValue: anObject forVariable: #kod)</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mesto">mesto"generated by Daskalos"     ^mesto</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mesto:">mesto: anObject"generated by Daskalos"     mesto := (self checkValue: anObject forVariable: #mesto)</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Letiste</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kod := nil.     nazev := nil.     mesto := nil.</body></methods><methods><class-id>Letiste</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="frekvenceLetu">frekvenceLetu	"vypocita v kolika letech se jednotliva letiste nachazeji (ze bud z letiste odleta nebo tam prileta)"	^(Let allInstances select: [:e | e zLetiste = self]) size 		+ (Let allInstances select: [:e | e naLetiste = self]) size</body></methods><class><name>Sedadlo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oznaceni trida uDveri </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Sedadlo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#oznaceni -&gt; Core.String); add: (#trida -&gt; Core.String); add: (#uDveri -&gt; Core.Number); yourself)</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oznaceni">oznaceni"generated by Daskalos"     ^oznaceni</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oznaceni:">oznaceni: anObject"generated by Daskalos"     oznaceni := (self checkValue: anObject forVariable: #oznaceni)</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="trida">trida"generated by Daskalos"     ^trida</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="trida:">trida: anObject"generated by Daskalos"     trida := (self checkValue: anObject forVariable: #trida)</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="uDveri">uDveri"generated by Daskalos"     ^uDveri</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="uDveri:">uDveri: anObject"generated by Daskalos"     uDveri := (self checkValue: anObject forVariable: #uDveri)</body></methods><methods><class-id>Sedadlo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     oznaceni := nil.     trida := nil.     uDveri := nil.</body></methods><class><name>Cestujici</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni datumNarozeni stat cisloDokladu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Cestujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#cisloDokladu -&gt; Core.Number); add: (#datumNarozeni -&gt; Core.Date); add: (#stat -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cisloDokladu">cisloDokladu"generated by Daskalos"     ^cisloDokladu</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cisloDokladu:">cisloDokladu: anObject"generated by Daskalos"     cisloDokladu := (self checkValue: anObject forVariable: #cisloDokladu)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="stat">stat"generated by Daskalos"     ^stat</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="stat:">stat: anObject"generated by Daskalos"     stat := (self checkValue: anObject forVariable: #stat)</body></methods><methods><class-id>Cestujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     datumNarozeni := nil.     stat := nil.     cisloDokladu := nil.</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkemUtraceno">celkemUtraceno	"vypocita, kolik celkem cestujici utratil celkove za letenky"	| select total |	total := 0.	select := (Letenka allInstances select: [:e | e patri = self]) 				collect: [:t | t cena].	select do: [:e | total := total + e].	^total</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pocetLetenek">pocetLetenek	"vypocita celkovy pocet letenek, co si jednotlivi cestujici zakoupili"	^(Letenka allInstances select: [:e | e patri = self]) size</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	"vrati vek osoby (v pripade chybejicich atributu vraci -1)"	datumNarozeni isNil 		ifTrue: [^-1]		ifFalse: [^((Date today subtractDate: datumNarozeni) / 365) truncated]</body></methods><class><name>Letenka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cislo spoj rezervovaneMisto cena patri pocetZavazadel prednostniNastup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Letenka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prednostniNastup -&gt; Core.Number); add: (#pocetZavazadel -&gt; Core.Number); add: (#rezervovaneMisto -&gt; Core.Object); add: (#spoj -&gt; Core.Object); add: (#patri -&gt; Core.Object); add: (#cislo -&gt; Core.Number); add: (#cena -&gt; Core.Number); yourself)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo">cislo"generated by Daskalos"     ^cislo</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo:">cislo: anObject"generated by Daskalos"     cislo := (self checkValue: anObject forVariable: #cislo)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patri">patri"generated by Daskalos"     ^patri</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patri:">patri: anObject"generated by Daskalos"     patri := (self checkValue: anObject forVariable: #patri)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetZavazadel">pocetZavazadel"generated by Daskalos"     ^pocetZavazadel</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetZavazadel:">pocetZavazadel: anObject"generated by Daskalos"     pocetZavazadel := (self checkValue: anObject forVariable: #pocetZavazadel)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prednostniNastup">prednostniNastup"generated by Daskalos"     ^prednostniNastup</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prednostniNastup:">prednostniNastup: anObject"generated by Daskalos"     prednostniNastup := (self checkValue: anObject forVariable: #prednostniNastup)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rezervovaneMisto">rezervovaneMisto"generated by Daskalos"     ^rezervovaneMisto</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rezervovaneMisto:">rezervovaneMisto: anObject"generated by Daskalos"     rezervovaneMisto := (self checkValue: anObject forVariable: #rezervovaneMisto)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spoj">spoj"generated by Daskalos"     ^spoj</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spoj:">spoj: anObject"generated by Daskalos"     spoj := (self checkValue: anObject forVariable: #spoj)</body></methods><methods><class-id>Letenka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     cislo := nil.     spoj := nil.     rezervovaneMisto := nil.     cena := nil.     patri := nil.     pocetZavazadel := nil.     prednostniNastup := nil.</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="doplatekExtraZavazadlo">doplatekExtraZavazadlo	"v pripade, ze cestujici ma vice nez jedno zavazadlo, bude platit poplatek za extra zavazadlo"	pocetZavazadel &gt; 1 ifTrue: [^'ano'] ifFalse: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty isNil not 		ifTrue: [spoj zpozdeniMinuty &gt; 179 ifTrue: [^'ano'] ifFalse: [^'ne']]		ifFalse: [^'ne']</body></methods><class><name>Let</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cislo zLetiste naLetiste datumOdletu casOdletu datumPriletu casPriletu zpozdeniMinuty </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Let class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#casPriletu -&gt; Core.Number); add: (#datumOdletu -&gt; Core.Date); add: (#cislo -&gt; Core.Number); add: (#zpozdeniMinuty -&gt; Core.Number); add: (#zLetiste -&gt; Core.Object); add: (#datumPriletu -&gt; Core.Date); add: (#casOdletu -&gt; Core.Number); add: (#naLetiste -&gt; Core.Object); yourself)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casOdletu">casOdletu"generated by Daskalos"     ^casOdletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casOdletu:">casOdletu: anObject"generated by Daskalos"     casOdletu := (self checkValue: anObject forVariable: #casOdletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casPriletu">casPriletu"generated by Daskalos"     ^casPriletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casPriletu:">casPriletu: anObject"generated by Daskalos"     casPriletu := (self checkValue: anObject forVariable: #casPriletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo">cislo"generated by Daskalos"     ^cislo</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo:">cislo: anObject"generated by Daskalos"     cislo := (self checkValue: anObject forVariable: #cislo)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumOdletu">datumOdletu"generated by Daskalos"     ^datumOdletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumOdletu:">datumOdletu: anObject"generated by Daskalos"     datumOdletu := (self checkValue: anObject forVariable: #datumOdletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumPriletu">datumPriletu"generated by Daskalos"     ^datumPriletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumPriletu:">datumPriletu: anObject"generated by Daskalos"     datumPriletu := (self checkValue: anObject forVariable: #datumPriletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naLetiste">naLetiste"generated by Daskalos"     ^naLetiste</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naLetiste:">naLetiste: anObject"generated by Daskalos"     naLetiste := (self checkValue: anObject forVariable: #naLetiste)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zLetiste">zLetiste"generated by Daskalos"     ^zLetiste</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zLetiste:">zLetiste: anObject"generated by Daskalos"     zLetiste := (self checkValue: anObject forVariable: #zLetiste)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zpozdeniMinuty:">zpozdeniMinuty: anObject"generated by Daskalos"     zpozdeniMinuty := (self checkValue: anObject forVariable: #zpozdeniMinuty)</body></methods><methods><class-id>Let</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     cislo := nil.     zLetiste := nil.     naLetiste := nil.     datumOdletu := nil.     casOdletu := nil.     datumPriletu := nil.     casPriletu := nil.     zpozdeniMinuty := nil.</body></methods><methods><class-id>Let</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="delkaLetu">delkaLetu	"comment stating purpose of message"	</body></methods><methods><class-id>Let</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="letDokoncen">letDokoncen	zpozdeniMinuty isNil not ifTrue: [^'ano'] ifFalse: [^'ne']</body></methods><methods><class-id>Let</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="zpozdeniMinuty">zpozdeniMinuty	"generated by Daskalos"	zpozdeniMinuty isNil not ifTrue: [^zpozdeniMinuty] ifFalse: [^'-1']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty isNil not 		ifTrue: [spoj zpozdeniMinuty &gt; 179 ifTrue: [^'ano'] ifFalse: [^'ne']]		ifFalse: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty isNil not 		ifTrue: [spoj zpozdeniMinuty]		ifFalse: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty isNil not 		ifTrue: [spoj zpozdeniMinuty &gt; 179]		ifFalse: [^'-1']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	^spoj zpozdeniMinuty</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty = -1 not 		ifTrue: [spoj zpozdeniMinuty &gt; 179 ifTrue: [^'ano'] ifFalse: [^'ne']]		ifFalse: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty != -1 not 		ifTrue: [spoj zpozdeniMinuty &gt; 179 ifTrue: [^'ano'] ifFalse: [^'ne']]		ifFalse: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty != -1 		ifTrue: [spoj zpozdeniMinuty &gt; 179 ifTrue: [^'ano'] ifFalse: [^'ne']]		ifFalse: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty = -1 		ifTrue: [^'ne']		ifFalse: [spoj zpozdeniMinuty &gt; 179 ifTrue: [^'ano'] ifFalse: [^'ne']]</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty = -1 ifTrue: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty == -1 ifTrue: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty == -1 ifTrue: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty = -1 ifTrue: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	^'ne'</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty &gt; 179 ifTrue: [^'ano'] ifFalse: [^'ne']</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty &gt; 179 ifTrue: [^0] ifFalse: [^1]</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="kompenzaceZpozdeni">kompenzaceZpozdeni	"pokud ma let zpozdeni 3 hodiny a vice, ma cestujici narok na kompenzaci"	spoj zpozdeniMinuty &gt; 179 ifTrue: [^0] ifFalse: [^1]</body></methods><class><name>Letiste</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>kod nazev mesto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Letiste class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#kod -&gt; Core.String); add: (#nazev -&gt; Core.String); add: (#mesto -&gt; Core.String); yourself)</body></methods><comment><class-id>Letiste</class-id><body>Atributy:	- kod = kazde letiste ma trojmistny kod, napÅÃ­klad LetiÅ¡tÄ VÃ¡clava Havla v Praze mÃ¡ kÃ³d PRG	- nazev, mestoMetody:	- frekvenceLetu = vypocitava kolikrat se letiste objevilo v nejakem z letÅ¯ a je jedno jestli to bylo letiÅ¡tÄ odkud se odlÃ©talo nebo kam se pÅÃ­lÃ©talo</body></comment><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kod">kod"generated by Daskalos"     ^kod</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="kod:">kod: anObject"generated by Daskalos"     kod := (self checkValue: anObject forVariable: #kod)</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mesto">mesto"generated by Daskalos"     ^mesto</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="mesto:">mesto: anObject"generated by Daskalos"     mesto := (self checkValue: anObject forVariable: #mesto)</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Letiste</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     nazev := (self checkValue: anObject forVariable: #nazev)</body></methods><methods><class-id>Letiste</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     kod := nil.     nazev := nil.     mesto := nil.</body></methods><methods><class-id>Letiste</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="frekvenceLetu">frekvenceLetu	"vypocita v kolika letech se jednotliva letiste nachazeji (ze bud z letiste odleta nebo tam prileta)"	^(Let allInstances select: [:e | e zLetiste = self]) size 		+ (Let allInstances select: [:e | e naLetiste = self]) size</body></methods><class><name>Sedadlo</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oznaceni trida uDveri </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Sedadlo class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#oznaceni -&gt; Core.String); add: (#trida -&gt; Core.String); add: (#uDveri -&gt; Core.Number); yourself)</body></methods><comment><class-id>Sedadlo</class-id><body>Atributy:	- oznaceni = unikÃ¡tnÃ­ identifikÃ¡tor mÃ­sta - celkovÄ jsem zjednoduÅ¡il, protoÅ¾e kaÅ¾dÃ½ model letadla mÃ¡ jinÃ½ poÄet a jinÃ© rozloÅ¾enÃ­ sedadel - modely letadel apod jsem v projektu neÅeÅ¡il	- trida = v jakem "vagonu" se mÃ­sto nachÃ¡zÃ­ - Äili economy, bussines, first class	- uDveri = 0 nebo 1 podle toho, jestli se nachazi misto u dveri, nektere aerospoleÄnosti nedovolujÃ­ nezletilÃ­m sedÄt u oken</body></comment><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oznaceni">oznaceni"generated by Daskalos"     ^oznaceni</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="oznaceni:">oznaceni: anObject"generated by Daskalos"     oznaceni := (self checkValue: anObject forVariable: #oznaceni)</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="trida">trida"generated by Daskalos"     ^trida</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="trida:">trida: anObject"generated by Daskalos"     trida := (self checkValue: anObject forVariable: #trida)</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="uDveri">uDveri"generated by Daskalos"     ^uDveri</body></methods><methods><class-id>Sedadlo</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="uDveri:">uDveri: anObject"generated by Daskalos"     uDveri := (self checkValue: anObject forVariable: #uDveri)</body></methods><methods><class-id>Sedadlo</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     oznaceni := nil.     trida := nil.     uDveri := nil.</body></methods><class><name>Cestujici</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni datumNarozeni stat cisloDokladu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Cestujici class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#cisloDokladu -&gt; Core.Number); add: (#datumNarozeni -&gt; Core.Date); add: (#stat -&gt; Core.String); add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><comment><class-id>Cestujici</class-id><body>Atributy:	- jmeno, prijmeni, datumNarozeni, stat	- cisloDokladu = tÃ­mto myslÃ­m ÄÃ­slo OPMetody:	- celkemUtraceno = vypoÄÃ­tÃ¡vÃ¡m celkovou ÄÃ¡stku, kterou cestujÃ­cÃ­ utratil za letenky u tÃ©to spoleÄnosti - zjistÃ­m, jakÃ© letenky patÅÃ­ k jednotlivÃ½m osobÃ¡m a potom je seÄtu	- pocetLetenek = zjistÃ­m jakÃ© letenky patÅÃ­ k jednotlivÃ½m osobÃ¡m a potom pomocÃ­ size zjistÃ­m, kolik jich celkem cestujÃ­cÃ­ mÃ¡	- vek = vypoÄÃ­tÃ¡m z mÃ­stnÃ­ho atributu datum NarozenÃ­ k dneÅ¡nÃ­mu dni</body></comment><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cisloDokladu">cisloDokladu"generated by Daskalos"     ^cisloDokladu</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cisloDokladu:">cisloDokladu: anObject"generated by Daskalos"     cisloDokladu := (self checkValue: anObject forVariable: #cisloDokladu)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni">datumNarozeni"generated by Daskalos"     ^datumNarozeni</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumNarozeni:">datumNarozeni: anObject"generated by Daskalos"     datumNarozeni := (self checkValue: anObject forVariable: #datumNarozeni)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     prijmeni := (self checkValue: anObject forVariable: #prijmeni)</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="stat">stat"generated by Daskalos"     ^stat</body></methods><methods><class-id>Cestujici</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="stat:">stat: anObject"generated by Daskalos"     stat := (self checkValue: anObject forVariable: #stat)</body></methods><methods><class-id>Cestujici</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     datumNarozeni := nil.     stat := nil.     cisloDokladu := nil.</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="celkemUtraceno">celkemUtraceno	"vypocita, kolik celkem cestujici utratil celkove za letenky"	| select total |	total := 0.	select := (Letenka allInstances select: [:e | e patri = self]) 				collect: [:t | t cena].	select do: [:e | total := total + e].	^total</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pocetLetenek">pocetLetenek	"vypocita celkovy pocet letenek, co si jednotlivi cestujici zakoupili"	^(Letenka allInstances select: [:e | e patri = self]) size</body></methods><methods><class-id>Cestujici</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="vek">vek	"vrati vek osoby (v pripade chybejicich atributu vraci -1)"	datumNarozeni isNil 		ifTrue: [^-1]		ifFalse: [^((Date today subtractDate: datumNarozeni) / 365) truncated]</body></methods><class><name>Letenka</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cislo spoj rezervovaneMisto cena patri pocetZavazadel prednostniNastup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Letenka class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prednostniNastup -&gt; Core.Number); add: (#pocetZavazadel -&gt; Core.Number); add: (#rezervovaneMisto -&gt; Core.Object); add: (#spoj -&gt; Core.Object); add: (#patri -&gt; Core.Object); add: (#cislo -&gt; Core.Number); add: (#cena -&gt; Core.Number); yourself)</body></methods><comment><class-id>Letenka</class-id><body>Atributy:	- cislo = reprezentuje jakÃ½si unikÃ¡tnÃ­ identifikÃ¡tor pro letenku, kaÅ¾dÃ¡ letenka by mÄla mÃ­t nÄjakÃ© unikÃ¡tnÃ­ id	- cena	- pocetZavazadel = kolik zavazadel (nemyslÃ­m tÃ­m pÅÃ­ruÄnÃ­ zavazadla) mÃ¡ cestujÃ­cÃ­ zaplaceno	- prednostniNastup = zda letenka opravÅuje cestujÃ­cÃ­ho k pÅednostnÃ­mu nÃ¡stupu, obsahuje buÄ ano nebo ne	- patri = odkaz na cestujiciho	- rezervovanemMisto = odkaz na sedadlo	- spoj = odkaz na letMetody:	- pristupDoSalonku - pokud letenka byla drazsi nez 5000 a sedadlo neni v economy tride, ma cestujici narok na pristup do VIP salonku pred odletem</body></comment><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena">cena"generated by Daskalos"     ^cena</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cena:">cena: anObject"generated by Daskalos"     cena := (self checkValue: anObject forVariable: #cena)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo">cislo"generated by Daskalos"     ^cislo</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo:">cislo: anObject"generated by Daskalos"     cislo := (self checkValue: anObject forVariable: #cislo)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patri">patri"generated by Daskalos"     ^patri</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patri:">patri: anObject"generated by Daskalos"     patri := (self checkValue: anObject forVariable: #patri)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetZavazadel">pocetZavazadel"generated by Daskalos"     ^pocetZavazadel</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pocetZavazadel:">pocetZavazadel: anObject"generated by Daskalos"     pocetZavazadel := (self checkValue: anObject forVariable: #pocetZavazadel)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prednostniNastup">prednostniNastup"generated by Daskalos"     ^prednostniNastup</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prednostniNastup:">prednostniNastup: anObject"generated by Daskalos"     prednostniNastup := (self checkValue: anObject forVariable: #prednostniNastup)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rezervovaneMisto">rezervovaneMisto"generated by Daskalos"     ^rezervovaneMisto</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rezervovaneMisto:">rezervovaneMisto: anObject"generated by Daskalos"     rezervovaneMisto := (self checkValue: anObject forVariable: #rezervovaneMisto)</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spoj">spoj"generated by Daskalos"     ^spoj</body></methods><methods><class-id>Letenka</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spoj:">spoj: anObject"generated by Daskalos"     spoj := (self checkValue: anObject forVariable: #spoj)</body></methods><methods><class-id>Letenka</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     cislo := nil.     spoj := nil.     rezervovaneMisto := nil.     cena := nil.     patri := nil.     pocetZavazadel := nil.     prednostniNastup := nil.</body></methods><methods><class-id>Letenka</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="pristupDoSalonku">pristupDoSalonku	"pokud letenka stala vice nez 3000 a neni v economy tride ma cestujici narok na pristup do VIP salonu pred odletem"	cena &gt;= 5000 &amp; (rezervovaneMisto trida ~= 'economy') 		ifTrue: [^'ano']		ifFalse: [^'ne']</body></methods><class><name>Let</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cislo zLetiste naLetiste datumOdletu casOdletu datumPriletu casPriletu zpozdeniMinuty </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Let class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#casPriletu -&gt; Core.Number); add: (#datumOdletu -&gt; Core.Date); add: (#cislo -&gt; Core.Number); add: (#zpozdeniMinuty -&gt; Core.Number); add: (#zLetiste -&gt; Core.Object); add: (#datumPriletu -&gt; Core.Date); add: (#casOdletu -&gt; Core.Number); add: (#naLetiste -&gt; Core.Object); yourself)</body></methods><comment><class-id>Let</class-id><body>Atributy:	- cislo = unikatnÃ­ identifikÃ¡tor letu	- datumOdletu, casOdletu	- datumPriletu, casPriletu = u dokonÄenÃ½ch letÅ¯ se zde zobrazuje reÃ¡lnÃ½ Äas a datum, kdy letadlo pÅistÃ¡lo a u naplÃ¡novanÃ½ch letÅ¯ jejich pÅedpoklÃ¡danÃ½ Äas pÅÃ­letu	- zpozdeniMinuty = u dokonÄenÃ½ch letÅ¯ v rozmezÃ­ od 0 do x, u nedokonÄenÃ½ch letÅ¯ je zde hodnota -1	- zLetiste, naLetiste = odkaz na LetisteMetody:	- zpozdeniMinuty = jake je zaznamenane zpozeni, u naplanovanych letu je zde hodnota -1	- letDokoncen = jestli je zde nejake zaznamenane zpozdeni (0 a vÃ­ce minut), je automaticky jasnÃ©, Å¾e let byl jiÅ¾ dokonÄen</body></comment><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casOdletu">casOdletu"generated by Daskalos"     ^casOdletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casOdletu:">casOdletu: anObject"generated by Daskalos"     casOdletu := (self checkValue: anObject forVariable: #casOdletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casPriletu">casPriletu"generated by Daskalos"     ^casPriletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="casPriletu:">casPriletu: anObject"generated by Daskalos"     casPriletu := (self checkValue: anObject forVariable: #casPriletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo">cislo"generated by Daskalos"     ^cislo</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="cislo:">cislo: anObject"generated by Daskalos"     cislo := (self checkValue: anObject forVariable: #cislo)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumOdletu">datumOdletu"generated by Daskalos"     ^datumOdletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumOdletu:">datumOdletu: anObject"generated by Daskalos"     datumOdletu := (self checkValue: anObject forVariable: #datumOdletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumPriletu">datumPriletu"generated by Daskalos"     ^datumPriletu</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datumPriletu:">datumPriletu: anObject"generated by Daskalos"     datumPriletu := (self checkValue: anObject forVariable: #datumPriletu)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naLetiste">naLetiste"generated by Daskalos"     ^naLetiste</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="naLetiste:">naLetiste: anObject"generated by Daskalos"     naLetiste := (self checkValue: anObject forVariable: #naLetiste)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zLetiste">zLetiste"generated by Daskalos"     ^zLetiste</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zLetiste:">zLetiste: anObject"generated by Daskalos"     zLetiste := (self checkValue: anObject forVariable: #zLetiste)</body></methods><methods><class-id>Let</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zpozdeniMinuty:">zpozdeniMinuty: anObject"generated by Daskalos"     zpozdeniMinuty := (self checkValue: anObject forVariable: #zpozdeniMinuty)</body></methods><methods><class-id>Let</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     cislo := nil.     zLetiste := nil.     naLetiste := nil.     datumOdletu := nil.     casOdletu := nil.     datumPriletu := nil.     casPriletu := nil.     zpozdeniMinuty := nil.</body></methods><methods><class-id>Let</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="letDokoncen">letDokoncen	zpozdeniMinuty isNil not ifTrue: [^'ano'] ifFalse: [^'ne']</body></methods><methods><class-id>Let</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="zpozdeniMinuty">zpozdeniMinuty	"generated by Daskalos"	zpozdeniMinuty isNil not ifTrue: [^zpozdeniMinuty] ifFalse: [^'-1']</body></methods>