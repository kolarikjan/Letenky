<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on May 7, 2007 at 8:05:25 am</time-stamp>


<class>
<name>Person</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>firstname surname address birthdate </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Person class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#birthdate -&gt; Core.Date); add: (#firstname -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Person</class-id>
<body>Instances of this class stores info about persons.
Each person knows its name (firstname &amp; surname), address and birthdate.
Attribute of each person has also age, but this attribute is made by method.</body>
</comment>

<methods>
<class-id>Person</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="address">address
"generated by Daskalos"

     ^address</body>

<body package="DaskalosUserClasses" selector="address:">address: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].
     address := anObject</body>

<body package="DaskalosUserClasses" selector="birthdate">birthdate
"generated by Daskalos"

     ^birthdate</body>

<body package="DaskalosUserClasses" selector="birthdate:">birthdate: anObject
"generated by Daskalos"

     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #birthdate. ^nil].
     birthdate := anObject</body>

<body package="DaskalosUserClasses" selector="firstname">firstname
"generated by Daskalos"

     ^firstname</body>

<body package="DaskalosUserClasses" selector="firstname:">firstname: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #firstname. ^nil].
     firstname := anObject</body>

<body package="DaskalosUserClasses" selector="surname">surname
"generated by Daskalos"

     ^surname</body>

<body package="DaskalosUserClasses" selector="surname:">surname: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].
     surname := anObject</body>
</methods>

<methods>
<class-id>Person</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     firstname := nil.
     surname := nil.
     address := nil.
     birthdate := nil.</body>
</methods>

<methods>
<class-id>Person</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="age">age

birthdate isNil
	ifTrue: [^nil]
	ifFalse: [^((Date today subtractDate: birthdate) / 365.2422) truncated]</body>
</methods>


<class>
<name>Doctor</name>
<environment>Smalltalk</environment>
<super>Person</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>specialization visitations </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Doctor class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#visitations -&gt; Core.Set); add: (#birthdate -&gt; Core.Date); add: (#specialization -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Doctor</class-id>
<body>Concrete subclass of class Person, which add specific behavior for persons being medical doctors. note that a doctor may be a patient as well.</body>
</comment>

<methods>
<class-id>Doctor</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="specialization">specialization
"generated by Daskalos"

     ^specialization</body>

<body package="DaskalosUserClasses" selector="specialization:">specialization: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #specialization. ^nil].
     specialization := anObject</body>

<body package="DaskalosUserClasses" selector="visitations">visitations
"generated by Daskalos"

     ^visitations</body>
</methods>

<methods>
<class-id>Doctor</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     specialization := nil.
     visitations := Set new.</body>
</methods>


<class>
<name>Visitation</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>doctor patient visitDate diagnosis nextVisitDate </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Visitation class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#doctor -&gt; Core.Object); add: (#nextVisitDate -&gt; Core.Date); add: (#diagnosis -&gt; Core.String); add: (#visitDate -&gt; Core.Date); add: (#patient -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Visitation</class-id>
<body>This is class having instances, which stores data about visitation of some person at some doctor.
</body>
</comment>

<methods>
<class-id>Visitation</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="diagnosis">diagnosis
"generated by Daskalos"

     ^diagnosis</body>

<body package="DaskalosUserClasses" selector="diagnosis:">diagnosis: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #diagnosis. ^nil].
     diagnosis := anObject</body>

<body package="DaskalosUserClasses" selector="doctor">doctor
"generated by Daskalos"

     ^doctor</body>

<body package="DaskalosUserClasses" selector="doctor:">doctor: anObject
"generated by Daskalos"

     doctor := anObject</body>

<body package="DaskalosUserClasses" selector="nextVisitDate">nextVisitDate
"generated by Daskalos"

     ^nextVisitDate</body>

<body package="DaskalosUserClasses" selector="nextVisitDate:">nextVisitDate: anObject
"generated by Daskalos"

     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #nextVisitDate. ^nil].
     nextVisitDate := anObject</body>

<body package="DaskalosUserClasses" selector="patient">patient
"generated by Daskalos"

     ^patient</body>

<body package="DaskalosUserClasses" selector="patient:">patient: anObject
"generated by Daskalos"

     patient := anObject</body>

<body package="DaskalosUserClasses" selector="visitDate">visitDate
"generated by Daskalos"

     ^visitDate</body>

<body package="DaskalosUserClasses" selector="visitDate:">visitDate: anObject
"generated by Daskalos"

     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #visitDate. ^nil].
     visitDate := anObject</body>
</methods>

<methods>
<class-id>Visitation</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     doctor := nil.
     patient := nil.
     visitDate := nil.
     diagnosis := nil.
     nextVisitDate := nil.</body>
</methods>


</st-source>
