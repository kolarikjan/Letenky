<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on May 7, 2007 at 8:08:59 am</time-stamp>


<class>
<name>Creature</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name birthdate </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Creature class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#birthdate -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Creature</class-id>
<body>Abstract class, which implements common behavior for both Person and Dog.

This class does not have any instance. 

It is only the software implementation of common
behavior for classes Person and Dog.</body>
</comment>

<methods>
<class-id>Creature</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="birthdate">birthdate
"generated by Daskalos"

     ^birthdate</body>

<body package="DaskalosUserClasses" selector="birthdate:">birthdate: anObject
"generated by Daskalos"

     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #birthdate. ^nil].
     birthdate := anObject</body>

<body package="DaskalosUserClasses" selector="name">name
"generated by Daskalos"

     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].
     name := anObject</body>
</methods>

<methods>
<class-id>Creature</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     name := nil.
     birthdate := nil.</body>
</methods>

<methods>
<class-id>Creature</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="age">age
	birthdate isNil ifTrue: [^0].
	^((Date today subtractDate: birthdate) / 365.2422) truncated</body>
</methods>


<class>
<name>Person</name>
<environment>Smalltalk</environment>
<super>Creature</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>surname address job </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Person class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#birthDate -&gt; Core.Date); add: (#job -&gt; Core.String); add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Person</class-id>
<body>Human creature. It is concrete subclass of class Creature.</body>
</comment>

<methods>
<class-id>Person</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="address">address
"generated by Daskalos"

     ^address</body>

<body package="DaskalosUserClasses" selector="address:">address: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].
     address := anObject</body>

<body package="DaskalosUserClasses" selector="job">job
"generated by Daskalos"

     ^job</body>

<body package="DaskalosUserClasses" selector="job:">job: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #job. ^nil].
     job := anObject</body>

<body package="DaskalosUserClasses" selector="surname">surname
"generated by Daskalos"

     ^surname</body>

<body package="DaskalosUserClasses" selector="surname:">surname: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].
     surname := anObject</body>
</methods>

<methods>
<class-id>Person</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     surname := nil.
     address := nil.
     job := nil.</body>
</methods>


<class>
<name>Dog</name>
<environment>Smalltalk</environment>
<super>Creature</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>race owner </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Dog class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#name -&gt; Core.String); add: (#race -&gt; Core.String); add: (#birthDate -&gt; Core.Date); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Dog</class-id>
<body>Dog creature.  It is concrete subclass of class Creature.</body>
</comment>

<methods>
<class-id>Dog</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="owner">owner
"generated by Daskalos"

     ^owner</body>

<body package="DaskalosUserClasses" selector="owner:">owner: anObject
"generated by Daskalos"

     owner := anObject</body>

<body package="DaskalosUserClasses" selector="race">race
"generated by Daskalos"

     ^race</body>

<body package="DaskalosUserClasses" selector="race:">race: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #race. ^nil].
     race := anObject</body>
</methods>

<methods>
<class-id>Dog</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     race := nil.
     owner := nil.</body>
</methods>

<methods>
<class-id>Dog</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="address">address
	owner isNil ifTrue: [^nil].
	^owner address</body>
</methods>


</st-source>
