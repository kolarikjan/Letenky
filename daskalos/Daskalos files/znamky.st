<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on May 7, 2007 at 8:09:20 am</time-stamp>


<class>
<name>Predmet</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>nazev </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Predmet class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Predmet</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="nazev">nazev
"generated by Daskalos"

     ^nazev</body>

<body package="DaskalosUserClasses" selector="nazev:">nazev: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #nazev. ^nil].
     nazev := anObject</body>
</methods>

<methods>
<class-id>Predmet</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     nazev := nil.</body>
</methods>


<class>
<name>Zkouska</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>datum znamka predmet </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zkouska class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#znamka -&gt; Core.Number); add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Zkouska</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="datum">datum
"generated by Daskalos"

     ^datum</body>

<body package="DaskalosUserClasses" selector="datum:">datum: anObject
"generated by Daskalos"

     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #datum. ^nil].
     datum := anObject</body>

<body package="DaskalosUserClasses" selector="predmet">predmet
"generated by Daskalos"

     ^predmet</body>

<body package="DaskalosUserClasses" selector="predmet:">predmet: anObject
"generated by Daskalos"

     predmet := anObject</body>

<body package="DaskalosUserClasses" selector="znamka">znamka
"generated by Daskalos"

     ^znamka</body>

<body package="DaskalosUserClasses" selector="znamka:">znamka: anObject
"generated by Daskalos"

     (anObject isKindOf: Number) ifFalse: [self class typeErrorFor: #znamka. ^nil].
     znamka := anObject</body>
</methods>

<methods>
<class-id>Zkouska</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     datum := nil.
     znamka := nil.
     predmet := nil.</body>
</methods>


<class>
<name>Student</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>jmeno prijmeni zkousky </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Student class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#zkousky -&gt; Core.Set); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Student</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="jmeno">jmeno
"generated by Daskalos"

     ^jmeno</body>

<body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #jmeno. ^nil].
     jmeno := anObject</body>

<body package="DaskalosUserClasses" selector="prijmeni">prijmeni
"generated by Daskalos"

     ^prijmeni</body>

<body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #prijmeni. ^nil].
     prijmeni := anObject</body>

<body package="DaskalosUserClasses" selector="zkousky">zkousky
"generated by Daskalos"

     ^zkousky</body>
</methods>

<methods>
<class-id>Student</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     jmeno := nil.
     prijmeni := nil.
     zkousky := Set new.</body>
</methods>

<methods>
<class-id>Student</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka

	^self znamky avg roundTo: 0.01</body>

<body package="DaskalosUserClasses" selector="znamky">znamky

	^zkousky collect: [:z | z znamka]</body>
</methods>


</st-source>
