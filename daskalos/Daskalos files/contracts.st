<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on May 7, 2007 at 8:08:00 am</time-stamp>


<class>
<name>Person</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name surname address </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Person class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#surname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Person</class-id>
<body>This class implements instances, which stores data about persons.
Each person knows its name, surname and address.
There is polymorphism with class Company without any inheritance.</body>
</comment>

<methods>
<class-id>Person</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="address">address
"generated by Daskalos"

     ^address</body>

<body package="DaskalosUserClasses" selector="address:">address: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].
     address := anObject</body>

<body package="DaskalosUserClasses" selector="name">name
"generated by Daskalos"

     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].
     name := anObject</body>

<body package="DaskalosUserClasses" selector="surname">surname
"generated by Daskalos"

     ^surname</body>

<body package="DaskalosUserClasses" selector="surname:">surname: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].
     surname := anObject</body>
</methods>

<methods>
<class-id>Person</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     name := nil.
     surname := nil.
     address := nil.</body>
</methods>


<class>
<name>Company</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name address </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Company class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Company</class-id>
<body>This class implements instances, which stores data about companies.
Each class knows its name and address.
There is polymorphism with class Person without any inheritance.</body>
</comment>

<methods>
<class-id>Company</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="address">address
"generated by Daskalos"

     ^address</body>

<body package="DaskalosUserClasses" selector="address:">address: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].
     address := anObject</body>

<body package="DaskalosUserClasses" selector="name">name
"generated by Daskalos"

     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].
     name := anObject</body>
</methods>

<methods>
<class-id>Company</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     name := nil.
     address := nil.</body>
</methods>


<class>
<name>Product</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name pricePerUnit producer </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Product class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#pricePerUnit -&gt; Core.Number); add: (#producer -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Product</class-id>
<body>This class implements instances, which stores data about products.
Each product knows its name, price per unit and producer. 
A producer of a particular product should be an instance of class Company.</body>
</comment>

<methods>
<class-id>Product</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="name">name
"generated by Daskalos"

     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject
"generated by Daskalos"

     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].
     name := anObject</body>

<body package="DaskalosUserClasses" selector="pricePerUnit">pricePerUnit
"generated by Daskalos"

     ^pricePerUnit</body>

<body package="DaskalosUserClasses" selector="pricePerUnit:">pricePerUnit: anObject
"generated by Daskalos"

     (anObject isKindOf: Number) ifFalse: [self class typeErrorFor: #pricePerUnit. ^nil].
     pricePerUnit := anObject</body>

<body package="DaskalosUserClasses" selector="producer">producer
"generated by Daskalos"

     ^producer</body>

<body package="DaskalosUserClasses" selector="producer:">producer: anObject
"generated by Daskalos"

     producer := anObject</body>
</methods>

<methods>
<class-id>Product</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     name := nil.
     pricePerUnit := nil.
     producer := nil.</body>
</methods>


<class>
<name>Contract</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>date amount customer product </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Contract class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#product -&gt; Core.Object); add: (#amount -&gt; Core.Number); add: (#customer -&gt; Core.Object); add: (#date -&gt; Core.Date); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<comment>
<class-id>Contract</class-id>
<body>This class implements instances, which stores data about contracts.
Each contract knows date, amount, customer and product.
</body>
</comment>

<methods>
<class-id>Contract</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="amount">amount
"generated by Daskalos"

     ^amount</body>

<body package="DaskalosUserClasses" selector="amount:">amount: anObject
"generated by Daskalos"

     (anObject isKindOf: Number) ifFalse: [self class typeErrorFor: #amount. ^nil].
     amount := anObject</body>

<body package="DaskalosUserClasses" selector="customer">customer
"generated by Daskalos"

     ^customer</body>

<body package="DaskalosUserClasses" selector="customer:">customer: anObject
"generated by Daskalos"

     customer := anObject</body>

<body package="DaskalosUserClasses" selector="date">date
"generated by Daskalos"

     ^date</body>

<body package="DaskalosUserClasses" selector="date:">date: anObject
"generated by Daskalos"

     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #date. ^nil].
     date := anObject</body>

<body package="DaskalosUserClasses" selector="product">product
"generated by Daskalos"

     ^product</body>

<body package="DaskalosUserClasses" selector="product:">product: anObject
"generated by Daskalos"

     product := anObject</body>
</methods>

<methods>
<class-id>Contract</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     date := nil.
     amount := nil.
     customer := nil.
     product := nil.</body>
</methods>

<methods>
<class-id>Contract</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="totalPrice">totalPrice

amount isNil ifTrue: [^nil].
product isNil ifTrue: [^nil].
^amount * product pricePerUnit</body>
</methods>


</st-source>
